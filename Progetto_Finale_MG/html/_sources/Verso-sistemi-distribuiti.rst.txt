.. role:: red 
.. role:: blue 
.. role:: brown 
.. role:: remark
.. role:: worktodo
.. role:: remark

==============================================
Verso-sistemi-distribuiti
==============================================

-------------------------------
History
-------------------------------


+++++++++++++++++++++++++++++++++
1 - Parte preliminare
+++++++++++++++++++++++++++++++++

#. :ref:`VirtualRobot23`: sistema che permette di muovere un robot virtuale usando interazioni sincrone via HTTP 
   e asincrone via WebSocket.
#. :ref:`Esempi di uso naive di WEnv`:  esempi di programmi Java che usano :ref:`VirtualRobot23` senza l'uso di supporti.
     
   - :ref:`TestMovesUsingHttp`: Esegue mosse di base del robot inviando via ``HTTP`` comandi espressi in :ref:`cril<Comandi-base per il robot in cril>`.
   - :ref:`TestMovesUsingWs`:   Esegue mosse di base del robot inviando via ``WebSocket`` comandi espressi in :ref:`cril<Comandi-base per il robot in cril>`
   
#. :ref:`unibo.basicomm23.http.HTTPCommApache`: un primo supporto per le interazioni via ``HTTP``,  introdotto durante
   lo sviluppo di :ref:`Applicazione1-HTTP-Core`.
#. :ref:`unibo.supports.VrobotHLMovesHTTPApache`:   supporto che fornisce mosse di alto livelo del robot usando
   :ref:`unibo.basicomm23.http.HTTPCommApache`.
#. :ref:`unibo.appl1.http.Application1HTTPCore`: realizzazione dei requisiti di :ref:`Applicazione1` basata su 
   :ref:`unibo.basicomm23.http.HTTPCommApache`.

+++++++++++++++++++++++++++++++++
2 - Interconnessione
+++++++++++++++++++++++++++++++++

#. :ref:`unibo.basicomm23.interfaces.Interaction2021`: verso un concetto astratto di **Interconnessione** come 
   canale di comunicazione bidirezionale definito nel progetto :ref:`unibo.basicomm23`, che fornisce implementazioni
   per diversi :ref:`Tipi di protocollo`.
#. :ref:`unibo.basicomm23.enablers.EnablerAsServer`: Server che ouò ricevere messaggi via TCP, UDP, CoaP, 
   introdotto per permettere che componenti remoti (come la console di figura) possano inviare comandi 
   ad una nostra applicazione supporti. Prima facilitazione per realizzare sistemi distribuiti, definiti nel progetto
   :ref:`unibo.basicomm23`, sezione :ref:`Abilitatori di comunicazione`.
#. :ref:`Interaction2021-HTTP-WS`: realizzazione dell'*Interconnessione* con protocolli HTTP (:ref:`HttpConnection`) 
   e WebSocket (:ref:`WsConnection`). In :ref:`WsConnection` sono di particolare rilevanza i metodi
   :ref:`String request(String msg)<VrobotHLMovesWS.request>` e 
   :ref:`void stepAsynch(int time, IWsInfoHandler stepok, IWsInfoHandler stepko)<VrobotHLMovesWS.stepAsynch>`.
#. :ref:`unibo.basicomm23.utils.ConnectionFactory`: factory che permette di costruire un oggetto di supporto alla comunicazione
   che implemeneta l'interfaccia :ref:`unibo.basicomm23.interfaces.Interaction2021` usando uno dei protocolli 
   definiti da :ref:`Tipi di protocollo`.
#. :ref:`it.unibo.virtualRobot2023.EsperimentiHTTP`: esprimenti di interazione con WEnv usando 
   :ref:`ConnectionFactory<unibo.basicomm23.utils.ConnectionFactory>` e :ref:`HttpConnection`.
#. :ref:`it.unibo.virtualRobot2023.EsperimentiWS`: esprimenti di interazione con WEnv usando 
   :ref:`ConnectionFactory<unibo.basicomm23.utils.ConnectionFactory>` e :ref:`WsConnection`.


+++++++++++++++++++++++++++++++++
3 - Supporti HL per robot
+++++++++++++++++++++++++++++++++

#. :ref:`unibo.supports.VrobotHLMovesHTTP`: supporto (evoluzione di :ref:`unibo.supports.VrobotHLMovesHTTPApache`) 
   che fornisce mosse di alto livelo del robot usando  :ref:`HttpConnection` per le interazioni con WEnv.
#. :ref:`unibo.supports.VrobotHLMovesWS`: supporto che fornisce mosse di alto livelo del robot,  usando  :ref:`WsConnection` 
   per le interazioni con WEnv.
#. :ref:`unibo.supports.VrobotHLSupportFactory`: factory che costruisce un oggetto di supporto alla comunicazione
   con il robot che implemeneta l'intefaccia :ref:`IVrobotMoves<unibo.common.IVrobotMoves>` usando ``HTTP`` o ``WS``.


+++++++++++++++++++++++++++++++++
4 - L'Applicazione1
+++++++++++++++++++++++++++++++++

Abbiamo introdotto due versioni di un'applicazione che muove il :ref:`VirtualRobot23` 
lungo i bordi perimetrali (privi di ostacoli) di una stanza dell'ambiente virtual WEnv:

- :ref:`Application1CoreConn<unibo.appl1.interaction.Application1CoreConn>`, che interagisce con :ref:`VirtualRobot23`
  in modo sincrono, usando il protocollo ``HTTP`` e :ref:`HttpConnection`.
  
  .. image:: ./_static/img/Appl1/ArchAppl1Wenv.png
         :width: 60% 
- :ref:`Applicazione1-WS<unibo.ws.Application1Ws>`,  che interagisce con :ref:`VirtualRobot23`  
  in modo asincrono, usando le ``WebSocket`` e :ref:`WsConnection`.  

- :ref:`unibo.appl1.interaction.Application1CoreConn`: realizzazione dei requisiti di :ref:`Applicazione1` 
   basata su :ref:`Application1AbstractBase<unibo.appl1.common.Application1AbstractBase>` che usa :ref:`VrobotHLSupportFactory<unibo.supports.VrobotHLSupportFactory>`.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   Comandi con risposta
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   L'applicazione (in entrambe le versioni) implementa operazioni ad alto livello per il robot, definite dall'interfaccia
   :ref:`unibo.common.IVrobotMoves`. 

   Tutte le operazioni sono realizzate da metodi privi di risposta, tranne   
   la mossa  :ref:`step` di movimento in avanti per un tempo 
   prefissato definita da un metodo con la seguente signature:

   .. code:: java

      boolean step(int time) throws Exception

   *step* viene realizzata in due modi diversi:

   - con interazioni **sincrone** (:ref:`step: implementazione`) all'interno di un supporto per le interazioni 
     con WEnv basato su ``HTTP``  :ref:`unibo.supports.VrobotHLMovesHTTP`;
   - con interazioni **asincrone** all'interno di un supporto per le interazioni con WEnv basato su ``WebSocket``
     :ref:`unibo.supports.VrobotHLMovesWS`.


+++++++++++++++++++++++++++++++++++++++++++++
5 -  Supporti HL per robot con planner
+++++++++++++++++++++++++++++++++++++++++++++

- :ref:`unibo.appl1.map.VrobotHLMovesWSPlanned`, che realizza le mosse del robot in modo da modificare la 
   (rappresentazione della sua) posizione su una mappa della stanza.

+++++++++++++++++++++++++++++++++++++++++++++
6 - Applicazioni con planner
+++++++++++++++++++++++++++++++++++++++++++++




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Application1ExploreByColumn
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Esplora la stanza con la seguente strategia:

- usa  :ref:`attemptStep` per muovere il robot lungo la prima colonna;
- appena trova un ostacolo, ruota di 180° e torna (usando  ``reachPos``) alla riga iniziale lungo il percorso appena fatto;
- si sposta sulla colonna successiva, se esiste, e ripete il procedimento. Se è giunto a wallRigth torna in HOME

Per realizzare questo comportamento, 
*Application1ExploreByColumn*  extends :ref:`Application1AbstractBase<unibo.appl1.common.Application1AbstractBase>` e definisce

.. code:: java

    public void doJob() throws Exception { walkAlongAColumn(); }

Il metodo ``walkAlongAColumn`` usa :ref:`attemptStep` di 
:ref:`VrobotHLMovesWSPlanned<unibo.appl1.map.VrobotHLMovesWSPlanned>` e  `reachPos`` di 
:ref:`Application1AbstractBase<unibo.appl1.common.Application1AbstractBase>`.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Application1ExploreSpiral
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Esplora la stanza con la seguente strategia:

- usa  :ref:`attemptStep` per cercare di raggiungere la cella 1,1;
- qualunque sia l'esito, torna a HOME usando ``reachPos`` di 
  :ref:`Application1AbstractBase<unibo.appl1.common.Application1AbstractBase>`
- ripete cercando di arrivare a 2,2 e così via


*Application1ExploreSpiral* estende :ref:`Application1AbstractBase<unibo.appl1.common.Application1AbstractBase>` e definisce

.. code:: java

    public void doJob() throws Exception { dospiral();   } 


------------------------------
7 - basicrobot
------------------------------

- Obiettivo: introdurre un componente software che esegue comandi di spostamento di un DDR-robot 
  in ‘modo indipendente dalla tecnologia’ con cui è realizzato del robot (virtuale o reale).

+++++++++++++++++++++++++++++++++++++++++++++
Progetto unibo.basicrobo22
+++++++++++++++++++++++++++++++++++++++++++++

- Un supporto per modello di robot (virtual, mbot, nano )
- Un modello qak:
   .. code::
    
     System  /* -trace  */   basicrobot22  

%%%%%%%%%%%%%%%%%%%%%%%
Lo step
%%%%%%%%%%%%%%%%%%%%%%%

Si intende sperimentare la realizzazione della mossa ``step(T)`` in diversi modi:

#. in modo sincrono, usando una operazione simile a :ref:`VrobotHLMovesWS.request`
#. in modo asincrono, seguendo il modello di :ref:`VrobotHLMovesWS.stepAsynch` ma trasformando l'esito positivo in un 
   messaggio (*dispatch*) ``stepdone`` e l'esito negativo in un messaggio (*dispatch*) ``stepfail``
#. in modo asincrono, considerando lo ``step(T)`` completato con successo se, entro il tempo ``T``, non si percepisce 
   alcun messaggio  (*dispatch*) ``obstacle`` inviato dal supporto :ref:`robotVirtual.virtualrobotSupport23`

   .. code::

      State doStep{ 
         onMsg( step : step( T ) ){  
            [#	StepTime     = payloadArg(0).toLong()  	#]    
            updateResource [# "step(${StepTime})" #]
         }  
        memoCurrentTime StartTime  
        run unibo.robot.robotSupport.move( "w" )  //moves a real robot forever !!! 
	   }  
	   Transition t0 whenTimeVar StepTime  -> stepDone  	
 		              whenMsg  obstacle     -> stepFail		

      State stepDone{   
         run unibo.robot.robotSupport.move( "h" )
         ...
      }
      State stepFail{   
         run unibo.robot.robotSupport.move( "h" )
         ...
      }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
robotVirtual.virtualrobotSupport23
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

- Unisce ``robotVirtual.virtualrobotSupport2021``  e ``robotVirtual.WsSupportObserver`` in quanto estende
  :ref:`ApplAbstractObserver` definito in :ref:`unibo.basicomm23`
- Realizza ``step`` invocando ``request(forwardStepMsg)`` che aspetta il risultato (``endmove`` in ``update``)
  che può essere ``true/false``
- Realizza ``move(w)`` mandando un ``forwardlongtimeMsg`` sulla :ref:`WsConnection` al VirtualRobot. 
- La parte *observer* emette un evento ``obstacle`` alla detection di una *collisione* 


Per sperimentare:

.. image:: ./_static/img/VirtualRobot/withbasicrobot.png
    :width: 60% 


------------------------------------------
Verso altre applicazioni
------------------------------------------

A questo punto, ampliamo i requsiti applicativi, secondo la sequenza che segue:

#. L'applicazione deve poter inviare a un componente remoto informazioni sul suo stato di elaborazione,
   se un tale componente lo chiede.
#. L'applicazione deve poter inviare informazioni sul suo stato ad osservatori remoti (se esistono).
#. L'applicazione deve poter interrompere il suo  ``walkAtBoundary`` quando il robot passa davanti a un *sonar*
   presente nella stanza, segnalare  a un operatore il suo stato di elaborazione e la distanza dal sonar e 
   deve poter ripartire quando l'operatore invia un comando ``resume``.

+++++++++++++++++++++++++++++
Stato di elaborazione
+++++++++++++++++++++++++++++

Per :blue:`stato di elaborazione`, intendiamo in questa fase il numero di passi effettuati e il numero di passi 
ancora da compiere (se è possibile dedurlo)  per completare un giro. 

+++++++++++++++++++++++++++++
Stato del robot
+++++++++++++++++++++++++++++
Per :blue:`statodel robot`, intendiamo infomazione sulla posizione e direzione corrent edal robot.
Si veda anche :ref:`Appl1: Stato del robot`.

++++++++++++++++++++++++++++++++++++++++++
Richiesta di informazione sullo stato
++++++++++++++++++++++++++++++++++++++++++

:blue:`Problematica`: non basta eseguire un comando remoto; occorre anche inviare informazioni di risposta.

- Il metodo :ref:`elaborate<unibo.appl1.interaction.Appl1MsgHandler>`
  dell'handler dei mesaggi, può inviare messaggi di risposta al chiamante sulla ``conn``, di tipo 
  :ref:`Interaction2021<unibo.basicomm23.interfaces.Interaction2021>`.
- La risposta può essere confezionata introducendo un nuovo metodo  (``getState``) nel POJO applicativo
- L'invio della risposta dovrebbe avvenire in un nuovo Thread, per evitare blocco dell'handler e quindi 
  del :ref:`EnablerAsServer<unibo.basicomm23.enablers.EnablerAsServer>`


++++++++++++++++++++++++++++++++++++++++++
Aggiornamento di osservatori sullo stato
++++++++++++++++++++++++++++++++++++++++++

:blue:`Problematica`: l'applicazione deve poter sapere se ha osservatori remoti e con quali protocolli 
comununicare con loro.

- Un modo per risolvere il problema è il seguente: l'applicazione può ricevere (con protocollo prefissato) 
  un messaggio di registrazione di un observer remoto e memorizzare la connessione su cui inviare gli update.
- Un'altra soluzione è introdurre un observer locale dell'applicazione che invia informazioni 
  su una topic prefissata di un broker MQTT.

++++++++++++++++++++++++++++++++++++++++++
Rilevazione da sonar
++++++++++++++++++++++++++++++++++++++++++

:blue:`Problematica`: l'operatore deve utilizzare un componente capace 
di ricevere informazioni da parte (di un observer) della applicazione e capace di inviare il comando ``resume``.

- Dotiamo l'applicazione di una WEB interface in modo che un operatore possa accedervi usando un browser.
  In pratica sostituiamo il nostro :ref:`EnablerAsServer<unibo.basicomm23.enablers.EnablerAsServer>` 
  con un WebServer (come Tomcat) e sfruttiamo piattaforme cone Node o SpringBoot.


------------------------------------------
Un nuovo obiettivo
------------------------------------------

Mano a mano che i requisiti si ampliano, notiamo che lo scambio di messaggi diviene parte del core-business 
applicativo, e che queste nuove, fondamentali parti vengono gestite all'interno dei server (come Tomcat) che abilitano 
le comunicazioni o di altri componenti come gli handler dei messaggi.

Sorgono ora altri obiettivi: 

- sostituire gli handler quali :ref:`Appl1MsgHandler<unibo.appl1.interaction.Appl1MsgHandler>` 
  con enti attivi (attori), capaci di gestire in modo ‘nativo’ (FIFO) messaggi inseriti nella coda di ingresso loro associata
- passare da attori message-driven ad attori che operano come un Automa a stati finiti (FSM).
  
In altre parole:

- E' possibile impostare l'applicazione come attore che opera come un FSM le cui transizioni sono connesse alla ricezione 
  di un messaggio?
- Cha vantaggi se ne ottengono?


+++++++++++++++++++++++++++++++++
xxx IApplication1
+++++++++++++++++++++++++++++++++

Entrambe le versioni dell'applicazione sono concepite come un POJO **oserervabile** che implementa la seguente interfaccia:

.. code:: java

  public interface IApplication1 {
      public void start() throws Exception;
      public void stop();
      public void resume();
      public void addAnObserverOnAppl(IObserver o);
      public void addAnObserverOnWsconn(IObserver o);
  }

- :ref:`start<metodi start/stop/resume>`: che attiva l'applicazione (nel Thread corrente);
- :ref:`stop<metodi start/stop/resume>`: che ferma l'applicazione, se questa esegue :ref:`walkBySteppingWithStop`;
- :ref:`resume<metodi start/stop/resume>`: che riattiva l'applicazione.

Ogni applicazione definisce anche:

- :ref:`walkAtBoundary<unibo.http.Application1NoStop>`, che pilota il robot a viaggiare per passi 
  (:ref:`walkByStepping` e :ref:`walkBySteppingWithStop`) lungo i bordi perimetrali 
  (privi di ostacoli) della stanza virtuale.


Per fermarsi e ripartire, l'applicazione fa uso del :blue:`semaforo` ``stopped`` 
(si veda :ref:`walkBySteppingWithStop`).

Il tramite tra il server e l'applicazioe è costituto da un oggetto 
di classe :ref:`Appl1MsgHandler<unibo.appl1.interaction.Appl1MsgHandler>`,
il cui metodo :ref:`elaborate<unibo.appl1.interaction.Appl1MsgHandler>` viene
invocato alla ricezione di un messaggio da 
:ref:`EnablerAsServer<unibo.basicomm23.enablers.EnablerAsServer>`,
che in questo modo delega a un componente applicativo il compito di gestire il messaggio.

La gstione del messaggio ``start`` induce l'handler a invocare il metodo ``walkAtBoundary()`` dell'applicazione 
all'interno di un nuovo Thread, per evitare il blocco del server e l'impossibilità di elaborare
altri messaggi (nel caso particolare, lo ``stop``).

+++++++++++++++++++++++++++++++++
xxx Application1AbstractBase
+++++++++++++++++++++++++++++++++

*Application1AbstractBase* implementa :ref:`IApplication1` e definisce i seguenti metodi ``protected``, usando una istanza
di :ref:`VrobotHLMovesWS<unibo.supports.VrobotHLMovesWS>`:

   - :blue:`abstract void doJob()` throws Exception: comportamento definito da classi specializzate
   - boolean reachPos(int stepT, int x, int y) throws Exception
   - void completeTheMap() throws Exception
   - boolean executePlan(List<Action> actions) throws Exception
   - void backToHome() throws Exception
