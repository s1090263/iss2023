.. role:: red 
.. role:: blue 
.. role:: brown 
.. role:: remark
.. role:: worktodo
.. role:: slide
.. role:: slide1

.. _tuPrologNew : https://apice.unibo.it/xwiki/bin/view/Tuprolog/
.. _tuProlog : http://amsacta.unibo.it/5450/7/tuprolog-guide.pdf
.. _Prolog : https://it.wikipedia.org/wiki/Prolog
.. _Json : https://it.wikipedia.org/wiki/JavaScript_Object_Notation

=============================
Applicazione1 
=============================

In :ref:`VirtualRobot23` si è detto che l'ambiente WEnv verrà utilizzato nello sviluppo di 
*applicazioni proattive/reattive* basate su 
componenti che interagiscono a scambio di messaggi con *interazioni sincrone e/o asincrone*.

Introduciamo qui i requisiti di una prima applicazione di questo tipo, dopo avere costruito il nostro ambiente 
di lavoro (*workspace*) come riportato in :ref:`Primi passi operativi`.

:slide:`KEY-POINTS`

- Analisi e progetto 'discorsivi'
- Piani di testing funzionale
- Piano di lavoro
- Interazione sincrona
- Divide et impera e single responsibility principle
- Supporti alle comunicazioni di basso livello
- Supporti alle comunicazioni di alto livello
- Osservabilità in ambiente locale
- Testing automatizzato in ambiente locale
- Interazione asincrona


---------------------------------------
Appl1: Requisiti
---------------------------------------

Scrivere un programma Java che possa inviare al robot:

- un comando **start** per attivare
  il robot in modo che percorra il bordo perimetrale della stanza rappresentata ne :ref:`La scena di WEnv`
- un comando **stop** per bloccare l'azione del robot
- un comando di **resume** per riattivare l'azione del robot


:slide:`Analisi e progetto`

---------------------------------------
Appl1: Analisi dei requisiti
---------------------------------------

Dopo opportuni colloqui con il committente, possiano affermare che :

- il robot si trova inizialmente nella situazione descritta come :ref:`Stato iniziale del virtualrobot`
- l'applicazione può inviare comandi al robot sia con  :ref:`Interazione sincrona` sia con :ref:`Interazione asincrona`
- un comando di **stop** inviato al robot che ha terminato il percorso non ha effetto
- un comando di **resume** inviato al robot che ha terminato il percorso equivale a un comando di **start** 
- l'applicazione invia i comandi **stop/resume** sotto il controllo di un utente umano, attraverso una console
  di comando, anche :blue:`remota`

---------------------------------------
Appl1: Analisi del problema
---------------------------------------

- Una volta inviato il comando **start**, il robot presenta un comportamento al contempo *proattivo* (in quanto 
  deve effettuare in modo autonomo un giro della stanza) e *reattivo*
  (in quanto deve essere capace di percepire ed eseguire i comandi **stop/resume**)
- Il componente sofware che realizza l'applicazione presenta un comportamento *reattivo* in quanto agisce quando 
  l'utente agisce sulla console di comando.
- Per  :blue:`console remota`  si intende il fatto che la console di comando potrebbe essere collocata su un 
  computer diverso da quello in cui gira l'applicazione.

:slide1:`Architettura logica`

+++++++++++++++++++++++++++++++
Appl1: Architettura logica
+++++++++++++++++++++++++++++++

In base a questa analisi, si può introdurre l'Architettura Logica del sistema da realizzare:

.. Utente --> :remark:`CmdConsole --> Appl1`--> :ref:`VirtualRobot23`

.. image:: ./_static/img/Appl1/Appl1Arch0.png
   :width: 70% 


il sistema è logicamente formato da tre componenti:

- *VirtualRobot23* (o meglio ``WEnv``), che viene fornito dal committente 
- *Appl1*, che dobbiamo realizzare
- *CmdConsole*, che dobbiamo realizzare

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Appl1: Natura dei componenti
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

- Il :ref:`VirtualRobot23` fornito da committente è un componente reattivo/proattivo che opera come un server che può ricevere 
  comandi via rete tramita HTTP  (:ref:`Interazione sincrona`) sulla porta ``8090`` e 
  tramite *Connessione WebSocket* (``WS``) sulla porta ``8091`` (:ref:`Interazione asincrona`. 
  Il server può anche inviare su ``WS``  messaggi che non siano risposte a comandi (si veda :ref:`Messaggio di stato`).
- Il componente *Appl1* si presenta come un ente attivo che attende un comando (``start/stop/resume``) da *CmdConsole*.
  QUesti comandi possono essere inviati come messaggi via rete tramite un qualche protocolllo, non specificato; tra le scelte plausibili
  vi sono ``TCP, UDP, MQTT, Bluetooth, CoAP``. *Appl1* :blue:`interpreta` i messaggi ricevuti,  convertendoli in comandi a :ref:`VirtualRobot23`.
- Il componente *CmdConsole* si presenta come un ente attivo che interagisce con un utente umano e che invia comandi via rete
  ad *Appl1*.


Siamo di fronte a un sistema distribuito, che può operare su 3 nodi computazionali, che si riducono a 2 se la *CmdConsole*   
risiede sullo stesso nodo in cui risiede l'applicazione *Appl1* e a 1 se anche *WEnv* viene attivato 
sullo stesso nodo in cui risiede l'applicazione.


.. In ogni caso, la *CmdConsole* deve costituire un componente separato rispetto al componente *Appl1* che realizza l'applicazione.  

:slide:`Piano di lavoro`

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Appl1: Piano di lavoro
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Il :blue:`core-business` dell'applicazione  è di competenza del componente *Appl1*, che conviene sia progettato e realizzato
per primo. La *CmdConsole* potrà essere progettata e realizzata in un secondo momento, prima in locale e poi nel distribuito.

Prima di procedere alla stesura del codice è però di fondamentale importanza affrontare la seguente problematica,
del tutto generale:

- :remark:`Come verificare in modo automatizzato che l'applicazione soddisfa i requisiti?`

:slide:`Piani di testing`

++++++++++++++++++++++++++++++++++++
Appl1: Piani di testing funzionale
++++++++++++++++++++++++++++++++++++

Un punto cruciale  è concepire la fase di testing come un processo eseguibile :blue:`in modo automatizzato`, 
cioè attraverso un programma che sia in grado, senza intervento umano,
di controllare se l'applicazione, una volta attivata, fa tutto quello che ci si aspetta da lei.

Nascono quindi nuove importanti problematiche:

- **Consoscenza sullo stato**: ``Come può una procedura di testing conoscere lo stato del robot?``
- **Concetto di stato**: ``Cosa si intende per stato del robot?``


%%%%%%%%%%%%%%%%%%%%%%%%%
Appl1: Stato del robot
%%%%%%%%%%%%%%%%%%%%%%%%%

Dopo ulteriore collquio con il committente, si ritiene significativo, al momento, sapere, al termine della esecuzione
dell'applicazione:

#. se il robot è fermo in HOME e **ha** effettuato il giro della stanza
#. quanti comandi di ``stop/resume`` trasmessi, il robot ha ricevuto ed elaborato

Si anche convenuto, che :brown:`in futuro`, potrebbe essere utile sapere:

- quale :blue:`posizione` il robot occupa nella stanza in un certo istante
- quale è il livello di autonomia del robot (risptto alla sua fonte di alimentazione)
- etc/etc

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Appl1: Azioni di testing pianificate
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Concentrando al momento l'attenzione sul componente *Appl1*, possiamo pianificare le seguenti azioni di testing:

- :brown:`testStartNoStop`. Dopo che *Appl1* ha ricevuto (da *CmdConsole*) il comando **start**, occorre verificare che il robot 
  abbia iniziato la sua attività, cioè sia in moto e che, dopo un certo tempo, esso risulti 
  fermo in HOME avendo completato un giro.

- :brown:`testStop`. Dopo che *Appl1* ha ricevuto (da *CmdConsole*) il comando **stop**, occorre verificare che il robot 
  sia fermo.

- :brown:`testResume`. Dopo che *Appl1* ha ricevuto (da *CmdConsole*) il comando **resume**, occorre  procedere come per
  *testStartNoStop*.

