.. role:: red
.. role:: blue  
.. role:: brown    
.. role:: worktodo
.. role:: remark   
.. role:: slide
.. role:: slide1

.. _SEDisasters : Software_engineering_disasters
.. _OpenGroupArch : Open Group Architectural Framework
.. _Design Pattern : Design Pattern
.. _Patten Software Architectures : ppp 
.. _Sito Web del corso : https://www.unibo.it/it/didattica/insegnamenti/insegnamento/2022/468003
.. _GitHubIss2023 : https://github.com/anatali/issLab2022
.. _VideoStudenti : https://unibo.cloud.panopto.eu/Panopto/Pages/Sessions/List.aspx#folderID=%222f957969-7f72-4609-a690-aca900aeba02%22

.. _waterfall : https://it.wikipedia.org/wiki/Modello_a_cascata
.. _Metodologia agile : https://it.wikipedia.org/wiki/Metodologia_agile
.. _DockerRepo : https://hub.docker.com/repositories

.. _Dispense Ingegneria del software : ./NatMolBook/bookEntry.html  

.. _robot reali: _static/devsDdr.html
.. _libri: _static/books.html
.. _template2023 : _static/templateToFill.html

.. _SCRUM : https://it.wikipedia.org/wiki/Scrum_(informatica)
.. _SCRUM Guide :   https://scrumguides.org/

.. _SPRINT : https://www.humanwareonline.com/project-management/center/pianificare-sprint-scrum/

.. _Sprint review : https://www.agileway.it/sprint-review-meeting/

.. _Leggi di Lehman: https://en.wikipedia.org/wiki/Lehman%27s_laws_of_software_evolution
.. _SOLID: https://clevercoder.net/2018/09/08/clean-architecture-summary-review/

 
======================================
Introduzione
======================================


.. image:: ./_static/img/Intro/fig0-2022.png 
   :align: center
   :width: 100%


-----------------------------------
Evoluzione del software
-----------------------------------

:slide:`Non solo istruzioni e dati ...`

Il software ha circa ``80`` anni, e la sua evoluzione, ancora impetuosa, avviene in modo simile alla evoluzione 
(più o meno Darwiniana) degli esseri viventi.

Sin dall'inizio si è sviluppata una evoluzione relativa a diversi aspetti:

- :ref:`Evoluzione dei paradigmi e dei linguaggi di programmazione`
- :ref:`Evoluzione delle architetture`
- :ref:`Evoluzione dei processi di produzione`


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Evoluzione dei paradigmi e dei linguaggi di programmazione
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Sin dall'inizio si è sviluppata una evoluzione a livello di paradigma di programmazione,
ovvero dell'insieme di strumenti concettuali forniti da un linguaggio di programmazione per la stesura del 
codice sorgente di un programma, definendo dunque il modo in cui il programmatore modella, 
concepisce e percepisce il programma stesso.

In questa sede ridordiamo solo

- anni 60: programmazione procedurale (FORTRAN, COBOL)
- primni anni 70: programmazione strutturata (Paascal, C)
- metà anni 70: programmazione modulare  (Modula)
- tardi anni 70: programmazione per tipi di dati astratti  
- anni 80: programmazione orientata agli oggetti (Smalltalk, Java, ...)


Stili di programmazione

- Programmazione concorrente
- Programmazione logica
- Programmazione orientata agli eventi 
- Programmazione funzionale
- Programmazione a vincoli

:slide:`... ma anche architetture`

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Evoluzione delle architetture
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

L'architettura è la forma di un sistema ed include la divisione del sistema in componenti, 
la disposizione di tali componenti e il modo in cui tali componenti comunicano tra loro. 

Lo scopo dell'architettura è facilitare lo sviluppo, l'implementazione, il funzionamento e la manutenzione del sistema, 
lasciando aperte quante più opzioni possibili, il più a lungo possibile.

Pertanto l'architettura non dovrebbe solo supportare il comportamento, ma anche fornire flessibilità 
nel ciclo di vita del sistema. 

Su queste premesse, si comprendono i diversi tipi di architetture dei sistemi software che sono state
proposte e sviluppate nel corso del tempo:

- single machine
- monolitiche
- cient-server
- distribuite (service-based, event-driven, space-based, service-oriented, microservices)
- evolutive


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Evoluzione dei sistemi
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Oltre a evoluzione di tipo generale, si può parlare anche di evoluzione dei singoli sistemi software.

Lehman, studioso dell'Imperial College di Londra, ha studiato per anni l'evoluzione di sistemi software 
che operano nel mondo reale (denominati  `E-type systems`)
cercando di individuare un insieme di comportamenti evolutivi, oggi noti come `Leggi di Lehman`_.

L'evoluzione del software, per il suo rapido percorso rispetto ad altre entità create dall'uomo, è stata vista da Lehman come 
il *"moscerino della frutta"* dello studio dell'evoluzione dei sistemi artificiali.

:slide:`Come si costruisce`

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Evoluzione dei processi di produzione
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

I processi  `waterfall`_ dell'ingegneria tradizionale, lasciano il posto a processi basati su
`Metodologia agile`_, di tipo **iterativo** e **incrementale**.

Nell'**ingegneria tradizionale** (meccanica, edile, etc) il costo del materiale costituisce spesso più del 50% 
del costo totale di un progetto, mentre nella produzione del software è il costo del lavoro ad essere preponderante: 
si parte dal 70% fino a giungere quasi al 100%. 
      
L'ingegneria tradizionale ha anche sperimentato che un cambiamento 
di costo 1 in fase di analisi potrebbe costare 1000 in fase di produzione.

 .. list-table::
  :widths: 60,40
  :width: 100%
  
  * - .. image:: ./_static/img/Intro/WaterFall.PNG
        :width: 100%
    - Per questo l'ingegneria classica diversifica le fasi di produzione delineando un ben noto flusso di lavoro 
      (*workflow*) costituito da un insieme di passi (o tasks): 

      #. definizione e analisi dei requisiti
      #. analisi del problema
      #. progetto della soluzione
      #. realizzazione del prodotto
      #. collaudo 
      #. messa in opera e manutenzione


.. ./_static/img/Intro/Spiral.PNG

:slide1:`Waterfall poco adatto per il software`

Nella costruzione del software, il modello a cascata porta spesso ad 
alti costi di produzione del software spesso dovuti al modello a cascata, 
a causa delle specifiche poco complete e ai molti interventi successivi per introdurre funzionalità 
non previste in partenza. 

Capita, quindi, che le pecche del modello vadano a ricadere sulla **manutenzione**, causandone costi crescenti, 
o che, al contrario, si operi con una manutenzione sommaria producendo un software con un'implementazione 
che diverge dalle specifiche dei requisiti.

La letteratura  (si veda ad esempio `SEDisasters`_) riporta inoltre casi di fallimento di un numero 
sorprendentemente rilevante di progetti software, evidenziando un insieme di cause principali:

- Cattiva specifica e gestione dei requisiti.
- Comunicazioni ambigue ed imprecise tra i diversi attori del processo di produzione 
  (utenti, manager, analisti, progettisti, implementatori).
- Architetture finali del sistema fragili (non robuste).
- Inconsistenze tra requisiti, progetto e realizzazione.
- Collaudi inadeguati o insufficienti.
- Inadeguata capacità di valutare e gestire i rischi e di controllare la propagazione dei cambiamenti.

Queste potenziali fonti di insuccesso hanno amplificato la loro influenza nel momento in cui 
l'intera disciplina ha vissuto la :blue:`transizione` da una dimensione prevalentemente :blue:`algoritmico-trasformazionale` 
a un dimensione fortemente :blue:`sistemistico-architetturale`.

:slide1:`Meglio processi agili e incrementali`


Oggi si ritiene che un approccio :blue:`INCREMENTALE` sia  indispensabile per aggredire la complessità del problema e per
mettere in luce in primis LE COSE
PIU' IMPORTANTI e PIU' CRITICHE senza perdersi in dettagli che possono distogliere
l'attenzione per formare un quadro generale di riferimento.

.. list-table::
  :widths: 60,40
  :width: 100%
  
  * - .. image:: ./_static/img/Intro/AgileDevelop.PNG
    - L'approccio descritto in `SCRUM Guide`_ è oggi un punto di riferimento.

      .. Questo modo di procedere può essere correlato anche al principio `YAGNI`_ (*You aren't gonna need it*).

      I vari SPRINT dovrebbero effettuare uno ZOOMING entro MACRO-COMPONENTI
      innescando un processo ITERATIVO di analisi, progetto , sviluppo e testing di
      quel componente o del SOTTOSISTEMA  che lo SPRINT vuole costruire.

:slide1:`Principi ispiratori`

Per la progettazione di sistemi software si fa spesso ricorso a un insieme di :ref:`Principi`, tra cui:

- :ref:`Design patterns`
- :ref:`SOLID`
- :ref:`12 Factor App`
- :ref:`Architettura esagonale`

Al centro del processo di sviluppo, oggi viene posto il concetto di :blue:`modello del dominio` applicativo.
 
.. image:: ./_static/img/Intro/agileEMDE.PNG
   :align: center
   :width: 70%


:slide:`Il nostro metodo`

#. Partiamo da un insieme di requisiti espressi in linguaggio naturale
#. Impostiamo una analisi dei requisiti che mira a esprimerli in modo formale e comprensibile a una macchina
#. Imppostiamo una analisi del problema che mira a definire:
 
   - una architettura logica del sistema
   - un piano di lavoro
   - un insieme di piani di testing,  espressi in MODO comprensibile a una macchina
   - un primo SPRINT relizzativo
 
#. Impostiamo ogni SPRINT come un **sottoprogetto** con sua propria spiegazione e testing. 

   - Lo SPRINT :math:`n+1` parte dai risultati dello sprint :math:`n` e costruisce un sottosistema (funzionante) 
     che sarà l'input dello SPRINT :math:`n+2`.
#. Facciamo seguire ad ogni SPRINT una fase di `Sprint review`_  i cui meeting saranno
 
   - :remark:`un nuovo modo di concepire le ore di ricevimento-studenti`.
#. Per ogni  SPRINT, compiliamo un documento (si veda `template2023`_)  per :blue:`rendere esplcite` le conoscenze, 
   le decisioni, i modelli, etc. introdotti nello SPRINT, fornendo indicazioni su come eseguire lo SPRINT. 

:slide1:`Il template come diario di bordo`

:ref:`Il template` va inteso come un :remark:`diario di bordo`, da compilare **in itinere** man mano si svolge 
il processo di produzione e :brown:`non dopo` avere sviluppato il codice.



:slide:`Il motto` 
 

Per focalizzare l'attenzione sulla nostra metodologia di costruzione, cercheremo di tenere fede al seguente motto:

.. list-table:: 
  :widths: 40,60
  :width: 100%

  * - Design first 
    - TopDown process
  * - .. image:: ./_static/img/Intro/Motto.png 
    - .. image:: ./_static/img/Intro/TopDownHowWhat.png
     
--------------------------------------
Contenuti del corso
--------------------------------------

Partendo da queste premesse, riportiamo qui quanto si legge nel `Sito Web del corso`_ :  
 

Al termine del corso lo studente:

- è in grado di impostare :blue:`processi di sviluppo cooperativo` del software basati su approcci agili 
  (in particolare SCRUM) avvalendosi anche di modelli eseguibili, espressi mediante meta-modelli custom;
- è' in grado di progettare e sviluppare sistemi software e relativi piani di testing in modo :blue:`incrementale 
  ed evolutivo`, partendo dal problema e dal dominio applicativo piuttosto che dalla tecnologia realizzativa, 
  attraverso la definizione di modelli eseguibili dell':blue:`analisi dei requisiti e dell'analisi del problema`;
- è in grado di :blue:`valutare in modo critico` le continua evoluzione delle tecnologie informatiche, 
  sia a livello computazionale, sia livello di sviluppo-software, acquisendo :blue:`conoscenze teorico-operative` 
  su linguaggi, metododologie e strumenti quali *Kotlin, Gradle, SCRUM, SpringBoot, Docker*;
- è in grado di comprendere il ruolo dei diversi :blue:`stili di architetture software` 
  (layers, client-server, pipeline, microkernel, service-based, event-driven, space-based, microservices) 
  e di come :blue:`scegliere lo stile architetturale più opportuno` per i diversi sotto-sistemi individuati;
- è in grado di affrontare l'analisi, il progetto e la costruzione di applicazioni distribuite ed eterogenee 
  di tipo proattivo e/o reattivo (unitamente a loro possibili piattaforme di sviluppo e di supporto run-time) 
  con particolare riferimento a :blue:`modelli computazionali a scambio di messaggi e ad eventi`;
- è in grado di realizzare le :blue:`interazioni a scambio di messaggi` tra componenti distribuiti utilizzando 
  modelli logici di alto livello e implementazioni basate su protocolli diversi (TCP, UDP, HTTP, CoAP, MQTT);
- è in grado di comprendere come sia possibile progettare e costruire ambienti di sviluppo custom capaci 
  di :blue:`generazione automatica di codice` (Software Factories in 'ecosistemi' come Eclipse/IntelliJ), 
  basandosi su *Model Driven Software Development* (MDSD) e sull'uso di Domain Specific Languages (DSL);
- è in grado di sviluppare applicazioni :blue:`capaci di combinare` aspetti di alto livello (in particolare di AI) 
  con aspetti di basso livello relativi a dispositivi di Internet of Things (IOT), utilizzando sia ambienti 
  virtuali sia dispositivi reali costruibili utilizzando elaboratori a basso costo quali RaspberryPi e Arduino;
- è in grado di :blue:`applicare` i concetti, i dispositivi, e gli strumenti sviluppati in modo concreto ed operativo 
  durante il corso per lo sviluppo di una :blue:`applicazione finale` che utilizza uno o più dispositivi IOT 'situati', 
  con particolare riferimento a *Differental Drive Robots* (DDR) con sensori 
  che possono agire in modo relativamente autonomo in :blue:`diversi` ambienti virtuali o reali, 
  senza modificare il software che esprime la 'business logic' del problema.


:slide:`Fasi del corso`

Pe raggiungere questi obiettivi, il corso 2022-2023 si articolerà in tre fasi:

:remark:`Tutto il software sviluppato durante il corso sarà utile per l'applicazione finale`

++++++++++++++++++++++++++++++++
FASE1
++++++++++++++++++++++++++++++++

:slide1:`Dalla OOP ai sistemi a scambio di messaggi`


Questa fase verrà svolta alternando considerazioni teorico-metodologiche alla costruzione effettiva
di prodotti software, articolata in diversi `SPRINT`_, 
con  **autovalutazione del lavoro svolto**, nel quadro delle `Sprint review`_.



Inizieremo con un :blue:`approccio bottom-up`, partendo dalle tecnologie disponibili.

.. list-table::
  :widths: 35,65
  :width: 100%
  
  * - .. image:: ./_static/img/Intro/bottomUp.png 
         :width: 100%
         :align: center
    -  Svilupperemo applicazioni  **proattive/reattive** basate su 
       componenti che interagiscono :blue:`a scambio di messaggi` con interazioni sincrone e/o asincrone.
        
       A tal fine, useremo un ambiente virtuale (denominato ``WEnv``)  che fornisce una scena
       in cui opera un :ref:`VirtualRobot<VirtualRobot23>`.

Durante lo sviluppo di queste applicazioni, a complessità crescente, avremo modo di costruire
**infrastrutture** di supporto e **astrazioni di componenti e di comunicazione** capaci di agevolare il compito 
dell'application-designer.

.. list-table::
  :widths: 50,50
  :width: 100%
  
  * - .. image:: ./_static/img/Architectures/legendComponets.PNG
         :width: 30%
         :align: center
    - .. image:: ./_static/img/Architectures/legendMessages.PNG
         :width: 30%    
         :align: center 


:slide1:`Da oggetti ad attori che scambiano messaggi`

- Il modello di programmazione a scambio di messaggi portato a livello di componenti.
- Introduzione al linguaggio Kotlin.
- Dalle coroutine Kotlin agli attori Kotlin.
- Da attori message-driven ad attori message-based che operano come automi a stati finiti.
- Definizione di una infrastruttura per attori come supporto alla costruzione di software distribuiti ed eterogeni.
   

++++++++++++++++++++++++++++++++
FASE2
++++++++++++++++++++++++++++++++

:slide1:`Da bottom-up a top-down: il ruolo dei modelli`

L'esperienza maturata nella FASE1 ci porta a valutare, durante
:ref:`L'analisi del problema`  l'*abstraction gap* tra un problema dato e le tecnologie esistenti

:slide1:`L'abstraction gap`

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Abstraction gap
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



Con il termine :blue:`abstraction gap` intendiamo denotare
la **distanza** tra le mosse di base fornite da un automa o da un linguaggio di 
programmazione (general-purpose) e quelle necessarie per affrontare
in modo adeguato un problema applicativo.

Un abstraction gap elevato induce ad impostare il processo di produzione in modo :blue:`TopDown`,
cercando di trovare le strategie migliori per colmare il gap, **scegliendo o sviluppando**
le tecnologie disponibili più opportune, che non sono più un assunto a-priori.

.. list-table::
  :widths: 60,40
  :width: 100%
  
  * - .. image:: ./_static/img/Intro/TopDownBottomUp1.PNG
    - .. image:: ./_static/img/Intro/topDown.png

:slide1:`I QActor`

In questa fase:

- Presenteremo la definizione di un linguaggio/metamodello custom (:blue:`QActor`) per la costruzione di sistemi 
  basati su attori
- Cercheremo di valutare il vantaggio dell'uso di **modelli eseguibili** nelle fasi di analisi dei requisiti e del problema 
  e come premessa per l'abbattimento dei costi (e degli imprevisti) di produzione.

++++++++++++++++++++++++++++++++
FASE3
++++++++++++++++++++++++++++++++
Applicazione di quanto sviluppato per la costruzione di una :slide1:`applicazione finale IOT` che 
prevede anche l'utilizzo di `robot reali`_, costruiti estendendo il sistema della FASE1. 


.. image:: ./_static/img/Intro/mbotIot.png 
   :align: center
   :width: 70%
 
--------------------------------------
Materiale didattico  
-------------------------------------- 
 
- Documento  `template2023`_: costituisce un punto di riferimento  'process agnostic', 
  cioè non indica il processo di sviluppo che adottiamo per costruirlo.
- Alcuni `Libri`_ importanti/utili
- Video tema finale studenti (Panopto) `VideoStudenti`_   

:slide:`LINKS`

Siti del corso: 
  
- https://www.unibo.it/it/didattica/insegnamenti/insegnamento/2022/468003
- https://virtuale.unibo.it/course/view.php?id=35152
- GITHUB del corso:  https://github.com/anatali/issLab23


.. panopto Attivazione del corso avvenuta con successo, cartella del corso con Id: c9ae4c92-9115-455a-a47f-afab01043ae6
.. 2021: https://virtuale.unibo.it/course/view.php?id=24199
.. https://www.youtube.com/watch?v=zxUBy6fYdUs


-------------------------------------------
Valutazione finale
-------------------------------------------
Dal `Sito Web del corso`_  leggiamo:

- Le attività di laboratorio sono intrinsecamente connesse in modo continuo a una :remark:`autovalutazione` 
  del lavoro svolto da parte di ogni singolo studente.

- Al termine del corso, viene proposto un tema di progetto come naturale 
  :remark:`sintesi delle attività svolte`, da affrontare in due fasi.

  #. La prima fase inizia con la pubblicazione di un testo di requisiti per la costruzione di un prototipo 
     La costruzione del prototipo mira a verificare il raggiungimento di adeguate abilità teorico/pratiche 
     e può essere effettuata in modo individuale o in un gruppo di non più di tre studenti.
  #. Al termine di questa fase seguirà una una discussione individuale orale sul lavoro svolto, 
     volta a valutare il livello di conoscenza, consapevolezza e di autonomia analitico/progettuale 
     del singolo studente. 

    In questa fase lo studente è invitato a porre in luce gli aspetti salienti del lavoro svolto 
    e le scelte effettuate alla luce delle nozioni teorico/pratiche apprese durante il corso.

:slide1:`Criteri di valutazione`

Maggiori dettagli si trovano in :ref:`Criteri di valutazione`.


:worktodo:`TODO: GIT repo e template2023`  

---------------------------------
DA FARE
---------------------------------
#. Attivare un proprio repository GIT privato, dando possibilità di accesso al docente 
   
   Nel repository inserire una prima directory denominata ``Deliverables`` 

#. Compilare il `template2023`_ inserendo una propria foto (recente) e ridenominaare il file :remark:`CognomeNomeTemplate.html`
#. Eseguire quanto riportato in:  :ref:`Installazioni su PC`
#. Eseguire quanto riportato in: :ref:`Come attivare WEnv`





.. slide1:`Next steps`. 
.. #. :ref:`Sistemi software`
.. #. :ref:`VirtualRobot23`