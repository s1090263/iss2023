/* Generated by AN DISI Unibo */ 
package it.unibo.alarmdevice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Alarmdevice ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
			val MINT = SystemUtilities.readJsonVariable("alarmConfig.json","MINT") as Long					//seconds to wait before robot can be stopped again
				var stopped: Boolean = false 	//true if the robot is stopped
				var lastStopped = System.currentTimeMillis()	//when the robot got stopped the last time
				
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outcyan("$name - START")
						 subscribeToLocalActor("distancefilter").subscribeToLocalActor("datacleaner").subscribeToLocalActor("sonar")  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						updateResourceRep( "sonar23 waiting ..."  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleobstacle",cond=whenEvent("obstacle"))
					transition(edgeName="t01",targetState="handlefree",cond=whenEvent("free"))
				}	 
				state("handleobstacle") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("obstacle(D)"), Term.createTerm("obstacle(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val elapsedTime = (System.currentTimeMillis() - lastStopped) / 1000 //elapsed time in seconds  
								if(  elapsedTime > MINT && !stopped  
								 ){CommUtils.outred("$name - distance is: ${payloadArg(0)}, sending STOP message")
								forward("stoptrolley", "stoptrolley(stop)" ,"fridgeservice" ) 
								 stopped = true
												   lastStopped = System.currentTimeMillis()
								updateResourceRep( "alarmdevice(stop)"  
								)
								}
								else
								 {if(  stopped  
								  ){}
								 else
								  {CommUtils.outcyan("$name - $MINT seconds have to pass before stopping again")
								  updateResourceRep( "alarmdevice(nostop)"  
								  )
								  }
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handlefree") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("free(D)"), Term.createTerm("free(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  stopped  
								 ){ stopped = false  
								CommUtils.outred("$name - distance is: ${payloadArg(0)}, sending RESUME message")
								forward("resumetrolley", "resumetrolley(resume)" ,"fridgeservice" ) 
								updateResourceRep( "alarmdevice(resume)"  
								)
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
} 
