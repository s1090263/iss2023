/* Generated by AN DISI Unibo */ 
package it.unibo.fridgeservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Fridgeservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "so"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				val MAXW = SystemUtilities.readJsonVariable("coldStorageConfig.json","MAXW") as Long //max storable kg in the ColdRoom
				val TICKETTIME = SystemUtilities.readJsonVariable("coldStorageConfig.json","TICKETTIME") as Long //seconds of ticket validity
				var CurrentlyStored : Float = 0f //kg stored in the ColdRoom	
				val openRequestList =  mutableListOf<Triple<Int, Float, Long>?>()	//structure to mantain the ticket requests that are open (<Ticket number, KG, EmissionTime>)
				var ticketValue = 0 //incrementing ticket value
		return { //this:ActionBasciFsm
				state("so") { //this:State
					action { //it:State
						delay(1000) 
						CommUtils.outblue("$name - START")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitRequest", cond=doswitch() )
				}	 
				state("waitRequest") { //this:State
					action { //it:State
						CommUtils.outblue("$name - waiting for requests...")
						updateResourceRep( "fridgeservice(waitingRequests)"  
						)
						updateResourceRep( "fridgeservice(currentlyStored,$CurrentlyStored,$MAXW)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t028",targetState="handleRequest",cond=whenRequest("storerequest"))
					transition(edgeName="t029",targetState="handleTicket",cond=whenRequest("sendticket"))
					transition(edgeName="t030",targetState="handleStop",cond=whenDispatch("stoptrolley"))
					transition(edgeName="t031",targetState="handleStop",cond=whenDispatch("resumetrolley"))
					transition(edgeName="t032",targetState="handleCharge",cond=whenReply("chargetaken"))
				}	 
				state("handleRequest") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("storerequest(KG)"), Term.createTerm("storerequest(KG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  payloadArg(0).toFloat() <= MAXW - CurrentlyStored  
								 ){ val Ticket= ticketValue
													ticketValue = ticketValue + 1
								CommUtils.outblue("$name - accepting request of ${payloadArg(0)} Kg, returning ticket: $Ticket")
								updateResourceRep( "fridgeservice(acceptingRequest)"  
								)
								answer("storerequest", "loadaccepted", "loadaccepted($Ticket)"   )  
								 CurrentlyStored += payloadArg(0).toFloat()  
								updateResourceRep( "fridgeservice(currentlyStored,$CurrentlyStored,$MAXW)"  
								)
								CommUtils.outblue("$name - After the load, there will be $CurrentlyStored Kg out of $MAXW in the ColdRoom")
								 openRequestList.add(Triple(Ticket, payloadArg(0).toFloat() , System.currentTimeMillis()))  
								}
								else
								 {CommUtils.outblue("$name - refusing request of ${payloadArg(0)} Kg (Not enough room) ")
								 updateResourceRep( "fridgeservice(refusingRequest)"  
								 )
								 answer("storerequest", "loadrefused", "loadrefused(ARG)"   )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitRequest", cond=doswitch() )
				}	 
				state("handleTicket") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("sendticket(TICKET)"), Term.createTerm("sendticket(TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val Ticket = payloadArg(0).toInt()
												var request : Triple<Int, Float, Long>? = Triple<Int, Float, Long>(-1, -1.0f, -1)
												var elapsedTime : Long = -1
												var Kg : Float = -1.0f
												try{
													request = openRequestList.find { it?.first == Ticket }									
													elapsedTime = (System.currentTimeMillis() - request!!.third) / 1000 //elapsed time in seconds			
													Kg = request.second //load of this request
													
												} catch (e: NullPointerException){				
												}						
								if(  elapsedTime != -1L && elapsedTime <= TICKETTIME  
								 ){CommUtils.outblue("$name - accepting ticket $Ticket of request for $Kg Kg. Asking trolley to take charge")
								updateResourceRep( "fridgeservice(acceptingTicket)"  
								)
								answer("sendticket", "ticketaccepted", "ticketaccepted($Ticket)"   )  
								request("takecharge", "takecharge($Ticket)" ,"transporttrolley" )  
								}
								else
								 {if(  elapsedTime != -1L   
								  ){CommUtils.outblue("$name - refusing ticket $Ticket of request for $Kg Kg (ticket expired)")
								 updateResourceRep( "fridgeservice(refusingTicket)"  
								 )
								 answer("sendticket", "ticketrefused", "ticketrefused(expired)"   )  
								  CurrentlyStored -= Kg  
								 updateResourceRep( "fridgeservice(currentlyStored,$CurrentlyStored,$MAXW)"  
								 )
								 }
								 else
								  {answer("sendticket", "ticketrefused", "ticketrefused(nonexistent)"   )  
								  }
								 }
								 if (elapsedTime!=-1L) {openRequestList.remove(request)}  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitRequest", cond=doswitch() )
				}	 
				state("handleCharge") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("chargetaken(TICKET)"), Term.createTerm("chargetaken(TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val Tick = payloadArg(0).toInt()  
								updateResourceRep( "fridgeservice(chargeTaken,$Tick)"  
								)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitRequest", cond=doswitch() )
				}	 
				state("handleStop") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("stoptrolley(ARG)"), Term.createTerm("stoptrolley(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblue("$name - Stopping the trolley")
								forward("stoptrolley", "stoptrolley(ARG)" ,"transporttrolley" ) 
								delay(100) 
								emit("alarm", "alarm(X)" ) 
								updateResourceRep( "fridgeservice(stoppingTrolley)"  
								)
						}
						if( checkMsgContent( Term.createTerm("resumetrolley(ARG)"), Term.createTerm("resumetrolley(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblue("$name - Resuming the trolley")
								forward("resumetrolley", "resumetrolley(ARG)" ,"transporttrolley" ) 
								updateResourceRep( "fridgeservice(resumingTrolley)"  
								)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitRequest", cond=doswitch() )
				}	 
			}
		}
} 
