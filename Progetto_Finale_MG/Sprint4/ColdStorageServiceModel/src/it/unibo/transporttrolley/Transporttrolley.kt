/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Transporttrolley ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var LastAction = MoveType.MOVETOINDOOR //last action tried
			   var FailedCounter = 0 //number of failed moves
			   var Stopped : Boolean = false //whether or not the trolley is stopped
			   var CurrentTicket = -1 //current ticket being processed
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name - START, engage basicrobot")
						request("engage", "engage(transporttrolley,330)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="s00",targetState="waitRequest",cond=whenReply("engagedone"))
					transition(edgeName="s01",targetState="s0",cond=whenReply("engagerefused"))
				}	 
				state("waitRequest") { //this:State
					action { //it:State
						if(  Stopped  
						 ){ Stopped = false  
						}
						else
						 {forward("setrobotstate", "setpos(0,0,down)" ,"basicrobot" ) 
						 }
						CommUtils.outgreen("$name - waiting for a request...")
						updateResourceRep( "transporttrolley(waitingRequest)"  
						)
						updateResourceRep( "transporttrolley(position,0,0)"  
						)
						 LastAction = MoveType.WAITREQUEST  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="stop",cond=whenDispatch("stoptrolley"))
					transition(edgeName="t03",targetState="moveToIndoor",cond=whenRequest("takecharge"))
				}	 
				state("moveToIndoor") { //this:State
					action { //it:State
						if(  Stopped  
						 ){ Stopped = false  
						}
						else
						 {if( checkMsgContent( Term.createTerm("takecharge(TICKET)"), Term.createTerm("takecharge(TICKET)"), 
						                         currentMsg.msgContent()) ) { //set msgArgList
						 		 CurrentTicket = payloadArg(0).toInt()  
						 		CommUtils.outgreen("$name - moving to INDOOR to take charge of ticket $CurrentTicket")
						 		updateResourceRep( "transporttrolley(movingToIndoor)"  
						 		)
						 }
						  LastAction = MoveType.MOVETOINDOOR  
						 request("moverobot", "moverobot(0,4)" ,"basicrobot" )  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="stop",cond=whenDispatch("stoptrolley"))
					transition(edgeName="t05",targetState="loadTheCharge",cond=whenReply("moverobotdone"))
					transition(edgeName="t06",targetState="failedAction",cond=whenReply("moverobotfailed"))
				}	 
				state("loadTheCharge") { //this:State
					action { //it:State
						if(  Stopped  
						 ){ Stopped = false  
						}
						else
						 {updateResourceRep( "transporttrolley(position,0,4)"  
						 )
						 CommUtils.outgreen("$name - loading charge ...")
						 updateResourceRep( "transporttrolley(loadingCharge)"  
						 )
						 delay(4000) 
						 CommUtils.outgreen("$name - taken charge of the load ...")
						 updateResourceRep( "transporttrolley(chargeTaken,$CurrentTicket)"  
						 )
						 answer("takecharge", "chargetaken", "chargetaken($CurrentTicket)"   )  
						  LastAction = MoveType.LOADCHARGE  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_loadTheCharge", 
				 	 					  scope, context!!, "local_tout_"+name+"_loadTheCharge", 50.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t07",targetState="moveToColdRoom",cond=whenTimeout("local_tout_"+name+"_loadTheCharge"))   
					transition(edgeName="t08",targetState="stop",cond=whenDispatch("stoptrolley"))
				}	 
				state("moveToColdRoom") { //this:State
					action { //it:State
						if(  Stopped  
						 ){ Stopped = false  
						}
						else
						 {CommUtils.outgreen("$name - moving to ColdRoom ...")
						 updateResourceRep( "transporttrolley(movingToColdroom)"  
						 )
						  LastAction = MoveType.MOVETOCR  
						 request("moverobot", "moverobot(4,3)" ,"basicrobot" )  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t09",targetState="stop",cond=whenDispatch("stoptrolley"))
					transition(edgeName="t010",targetState="storeTheCharge",cond=whenReply("moverobotdone"))
					transition(edgeName="t011",targetState="failedAction",cond=whenReply("moverobotfailed"))
				}	 
				state("storeTheCharge") { //this:State
					action { //it:State
						if(  Stopped  
						 ){ Stopped = false  
						}
						else
						 {updateResourceRep( "transporttrolley(position,4,3)"  
						 )
						 CommUtils.outgreen("$name - depositing load ...")
						 updateResourceRep( "transporttrolley(depositingLoad)"  
						 )
						 delay(4000) 
						 CommUtils.outgreen("$name - load deposited ...")
						  LastAction = MoveType.STORECHARGE  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_storeTheCharge", 
				 	 					  scope, context!!, "local_tout_"+name+"_storeTheCharge", 1000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t012",targetState="moveToHome",cond=whenTimeout("local_tout_"+name+"_storeTheCharge"))   
					transition(edgeName="t013",targetState="stop",cond=whenDispatch("stoptrolley"))
					transition(edgeName="t014",targetState="moveToIndoor",cond=whenRequest("takecharge"))
				}	 
				state("moveToHome") { //this:State
					action { //it:State
						if(  Stopped  
						 ){ Stopped = false  
						}
						else
						 {CommUtils.outgreen("$name - No more requests, moving to home ...")
						 updateResourceRep( "transporttrolley(movingToHome)"  
						 )
						  LastAction = MoveType.MOVETOHOME  
						 request("moverobot", "moverobot(0,0)" ,"basicrobot" )  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t015",targetState="stop",cond=whenDispatch("stoptrolley"))
					transition(edgeName="t016",targetState="trolleyAtHome",cond=whenReply("moverobotdone"))
					transition(edgeName="t017",targetState="failedAction",cond=whenReply("moverobotfailed"))
				}	 
				state("trolleyAtHome") { //this:State
					action { //it:State
						updateResourceRep( "transporttrolley(position,0,0)"  
						)
						CommUtils.outgreen("$name - trolleyAtHome ... ")
						updateResourceRep( "transporttrolley(atHome)"  
						)
						forward("setdirection", "dir(down)" ,"basicrobot" ) 
						delay(1000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="exitSystem", cond=doswitch() )
				}	 
				state("failedAction") { //this:State
					action { //it:State
						 FailedCounter += 1  
						CommUtils.outgreen("$name - The last action (${LastAction.name}) failed, trying again")
						forward("tryagain", "tryagain(ARG)" ,"transporttrolley" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t018",targetState="exitSystem",cond=whenDispatchGuarded("tryagain",{ FailedCounter >= 10  
					}))
					transition(edgeName="t019",targetState="moveToIndoor",cond=whenDispatchGuarded("tryagain",{ LastAction == MoveType.MOVETOINDOOR  
					}))
					transition(edgeName="t020",targetState="moveToColdRoom",cond=whenDispatchGuarded("tryagain",{ LastAction == MoveType.MOVETOCR  
					}))
					transition(edgeName="t021",targetState="moveToHome",cond=whenDispatchGuarded("tryagain",{ LastAction == MoveType.MOVETOHOME  
					}))
				}	 
				state("stop") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("stoptrolley(ARG)"), Term.createTerm("stoptrolley(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Stopped = true  
								CommUtils.outgreen("$name - STOPPED, waiting to be resumed")
								updateResourceRep( "transporttrolley(stopped)"  
								)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t022",targetState="waitRequest",cond=whenDispatchGuarded("resumetrolley",{ LastAction == MoveType.WAITREQUEST  
					}))
					transition(edgeName="t023",targetState="moveToIndoor",cond=whenDispatchGuarded("resumetrolley",{ LastAction == MoveType.MOVETOINDOOR  
					}))
					transition(edgeName="t024",targetState="loadTheCharge",cond=whenDispatchGuarded("resumetrolley",{ LastAction == MoveType.LOADCHARGE  
					}))
					transition(edgeName="t025",targetState="moveToColdRoom",cond=whenDispatchGuarded("resumetrolley",{ LastAction == MoveType.MOVETOCR  
					}))
					transition(edgeName="t026",targetState="storeTheCharge",cond=whenDispatchGuarded("resumetrolley",{ LastAction == MoveType.STORECHARGE  
					}))
					transition(edgeName="t027",targetState="moveToHome",cond=whenDispatchGuarded("resumetrolley",{ LastAction == MoveType.MOVETOHOME  
					}))
				}	 
				state("exitSystem") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("tryagain(ARG)"), Term.createTerm("tryagain(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outgreen("$name - Too many fails, exiting the system")
						}
						forward("disengage", "disengage(transporttrolley)" ,"basicrobot" ) 
						CommUtils.outgreen("$name - disengaged")
						delay(1000) 
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
