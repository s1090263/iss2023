/* Generated by AN DISI Unibo */ 
package it.unibo.serviceaccessgui

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
	
class Serviceaccessgui ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "so"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
				return { //this:ActionBasciFsm
				state("so") { //this:State
					action { //it:State
						CommUtils.outblue("GUI START")
						CoapObserverSupport(myself, "127.0.0.1","8090","ctxbasicrobot","basicrobot")
						CoapObserverSupport(myself, "localhost","9990","ctxcoldstorageservice","transporttrolley")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="doObserve",cond=whenDispatch("coapUpdate"))
				}	 
				state("doObserve") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("coapUpdate(SOURCE,ARG)"), Term.createTerm("coapUpdate(basicrobot,ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outyellow("$name - From basicrobot: ${payloadArg(1)}")
						}
						if( checkMsgContent( Term.createTerm("coapUpdate(SOURCE,ARG)"), Term.createTerm("coapUpdate(transporttrolley,ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outmagenta("$name - From trasporttrolley: ${payloadArg(1)}")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
