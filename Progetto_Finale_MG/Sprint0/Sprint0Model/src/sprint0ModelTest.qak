System coldstorageservice

// ----- Messaggi per le interazioni con il basic robot -------
Request engage			: engage(OWNER,STEPTIME) //richiesta di ingaggio
Reply	engagedone		: engagedone(ARG) //risposta di conferma di ingaggio
Reply	engagerefused	: engagerefused(ARG) //risposta di rifiuto di ingaggio

Dispatch disengage		: disengage(ARG) //messaggio di disingaggio
//--------------------------------------------------------------------

//-----------------------Messaggi applicativi------------------------
Request storerequest 	: storerequest(KG) //richiesta di depositare un food load
Reply loadaccepted		: loadaccepted(TICKET) //risposta di accettamento richiesta del load
Reply loadrefused		: loadrefused(_) //risposta di rifiuto richiesta del load

Request sendticket : sendticket(TICKET) //messaggio per inviare il ticket al servizio
Reply chargetaken : chargetaken(_) // messaggio che invia il servizio per prendere in carico una richiesta
Reply ticketrefused : ticketrefused(_) //messaggio che invia il servizio se il ticket è scaduto

//------------------------------------------------------------------



Context ctxcoldstorageservice ip [host="localhost" port=9990]
Context ctxbasicrobot ip [host="127.0.0.1" port=8020]

ExternalQActor basicrobot context ctxbasicrobot

QActor serviceaccessgui context ctxcoldstorageservice{
	State so initial{
		println("$name - START") color magenta
	}
	Goto sendRequest
	
	State sendRequest{
		delay 3000
		//println("$name - Sending store request: 30 Kg") color magenta
		//request fridgeservice -m storerequest: storerequest(30)
	}
	Transition t0 whenReply loadaccepted -> sendTicket
					whenReply loadrefused -> endWork
	
	State sendTicket{		
		onMsg( loadaccepted : loadaccepted(TICKET) ){
			println("$name - Moving to the INDOOR") color magenta	      
			delay 2000 //simulating driver taking time to go to indoor
			[# val Ticket="${payloadArg(0)}" #]
			println("$name - Sending ticket: $Ticket") color magenta	        
	        request fridgeservice -m sendticket: sendticket($Ticket)
      	}
	}
	Transition t0 whenReply chargetaken -> endWork
					whenReply ticketrefused -> endWork
	
	State endWork{
		onMsg( loadrefused : loadrefused(_) ){
			println("$name - END WORK: load got refused") color magenta
		}
		onMsg( ticketrefused : ticketrefused(_) ){
			println("$name - END WORK: ticket got refused") color magenta
		}
		onMsg( chargetaken : chargetaken(_) ){
			println("$name - END WORK: food load taken") color magenta
		}		
	}
}


QActor transporttrolley context ctxcoldstorageservice{
	State s0 initial{
		println("$name - START, engage basicrobot") color green
		//request basicrobot -m engage: engage(transporttrolley,330)
	}
	Transition s0 whenReply engagedone -> waitRequest
	
	State waitRequest {
		println("$name - waiting for a request...") color green
		[# CommUtils.waitTheUser("$name Please HIT to send takeCharge command to trolley ") #] //simulate the taking charge command that will be sent by the system
	}
	Goto moveToIndoor	
		
	State moveToIndoor {
			println("$name - taking charge of request") color green	
			println("$name - moving to Indoor") color green	
			delay 2000 //simulate moving to indoor (will be changed with real movement)					
	}
	Goto loadTheCharge
	
	State loadTheCharge{
		println("$name - loading charge ...") color green
		[# CommUtils.waitTheUser("$name loading charge. Please HIT ") #]
		
		//replyTo sendticket with chargetaken: chargetaken(_) caller== serviceaccessgui
	}
	Goto moveToColdRoom
	
	State moveToColdRoom{
		println("$name - moving to ColdRoom ...") color green
		delay 2000 //simulate moving to coldroom (will be changed with real movement)
	}
	Goto storeTheCharge
	
	State storeTheCharge{
		println("$name - storing charge ...") color green
		[# CommUtils.waitTheUser("$name storing charge. Please HIT")#]
	}
	Transition t0 whenTime 1000 -> moveToHome
	
	State moveToHome{
		println("$name - No more requests, moving to home ...") color green
		delay 2000 //simulate moving to Home (will be changed with real movement)
	}
	Goto trolleyAtHome
	
	State trolleyAtHome{
		println("$name - trolleyAtHome ... ") color green
		//forward basicrobot -m disengage : disengage(transporttrolley)
		println("$name - disengaged") color green
		delay 1000 //avoid to premature abort of connection
		[# System.exit(0) #]
	}
}

QActor fridgeservice context ctxcoldstorageservice{
	[#
		val MAXW = 100 //max storable kg in the ColdRoom
		val TICKETTIME = 20 //seconds of ticket validity
		var CurrentlyStored : Float = 0f //kg stored in the ColdRoom	
		val openRequestList =  mutableListOf<Triple<Int, Float, Long>?>()	//structure to mantain the ticket requests that are open (<Ticket number, KG, EmissionTime>)
		var ticketValue = 0 //incrementing ticket value
	#]
	
	State so initial{
		println("$name - START") color blue
	}
	Goto waitRequest
	
	State waitRequest{
		println("$name - waiting for requests...") color blue
	}
	Transition t0 whenRequest storerequest -> handleRequest
					whenRequest sendticket -> handleTicket
	
	State handleRequest{
		onMsg(storerequest: storerequest(KG)){			
			if [# payloadArg(0).toFloat() < MAXW - CurrentlyStored #]{
				[# val Ticket= ticketValue
					ticketValue = ticketValue + 1
				#]
				println("$name - accepting request of ${payloadArg(0)} Kg, returning ticket: $Ticket") color blue
				replyTo storerequest with loadaccepted : loadaccepted($Ticket)
				[# openRequestList.add(Triple(Ticket, payloadArg(0).toFloat() , System.currentTimeMillis())) #]	
			}
			else {
				println("$name - refusing request of ${payloadArg(0)} Kg (Not enough room) ") color blue
				replyTo storerequest with loadrefused : loadrefused(_)
			}	
		}
	}
	Goto waitRequest
	
	State handleTicket{
		onMsg(sendticket: sendticket(TICKET)){
			[# 
				val Ticket = payloadArg(0).toInt()
				val request = openRequestList.find { it?.first == Ticket }			
				val elapsedTime = (System.currentTimeMillis() - request!!.third) / 1000 //elapsed time in seconds			
				val Kg = request.second //load of this request
			#] //request with the ticket value of the sendticket payload
			
			if [# elapsedTime <= TICKETTIME #]{
				println("$name - accepting ticket $Ticket of request for $Kg Kg") color blue
				replyTo sendticket with chargetaken : chargetaken(_) //not final (from the requirements we are not sure of who sends the chargetaken)
				[# CurrentlyStored += Kg #]
				println("$name - After the load, there will be $CurrentlyStored Kg out of $MAXW in the ColdRoom") color blue
			}
			else{
				println("$name - refusing ticket $Ticket of request for $Kg Kg (ticket expired)") color blue
				replyTo sendticket with ticketrefused : ticketrefused(_)
			}
			[# openRequestList.remove(request) #] //removing the request after we are done with it
		}
	}
	Goto waitRequest
	
}