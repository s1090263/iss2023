.. role:: red
.. role:: blue  
.. role:: brown    
.. role:: remark   
.. role:: slide
.. role:: slide1

.. _template2023 : _static/templateToFill.html

.. _UML : https://it.wikipedia.org/wiki/Unified_Modeling_Language
.. _Use Cases Diagrams : https://it.wikipedia.org/wiki/Use_Case_Diagram
.. _User Stories : https://en.wikipedia.org/wiki/User_story
.. _Software testing : https://en.wikipedia.org/wiki/Software_testing 
.. _Software testing IBM : https://www.ibm.com/it-it/topics/software-testing
.. _Software testing quotes : https://softwaretestingfundamentals.com/software-testing-quotes/
.. _Automated-Testing-Plan FAQ : http://sqa.fyicenter.com/FAQ/Automated-Testing-Plan/
.. _Junit FAQ : http://sqa.fyicenter.com/FAQ/JUnit/What_Is_JUnit_.html
.. _DevOps : https://it.wikipedia.org/wiki/DevOps
.. _TemaFinale22.html : ./TemaFinale22.html

=========================================
Il template
=========================================

.. list-table::
  :widths: 35,65
  :width: 100%
  
  * - .. image:: ./_static/img/Intro/Template.png 
         :width: 100%
         :align: center
    -  Il `template2023`_ costituisce lo strumento che useremo per rendere esplcite le conoscenze, le decisioni 
       e i modelli introdotte nelle fasi di analisi e di progetto.

       Questo documento:
       
       - va inteso come un :remark:`diario di bordo`, da compilare **in itinere** man mano si svolge 
         il processo di produzione e :brown:`non dopo` avere sviluppato il codice.

       - intende costituire un punto di riferimento 
         **process agnostic**,  non ancorato ad alcun specifico processo di sviluppo adottato per costruirlo.

       Occorre ripensare al ruolo delle documentazione e alle metodologie più adeguate per realizzarla
       in modo utile, costruttivo e sistematicamente correlato allo stato corrente del codice.


Anticipiamo qui alcuni aspetti che svilupperemo in modo più approfondito lungo tutto il corso.

:slide:`I requisiti`

---------------------------------
Requisiti
---------------------------------

Riportiamo qui (il link a) il documento dei reqisiti redatto dal committente (ad esempio) `TemaFinale22.html`_)
:brown:`SENZA ALCUNA MODIFCA`.

:slide:`L'analisi dei requisiti`

---------------------------------
L'analisi dei requisiti
---------------------------------

L'analisi dei requisiti mira a:

:slide1:`chiarire COSA (WHAT) il committente intende`

Occorre fare una analisi del testo che precisi in modo non ambiguo
il significato dei termini usati e le informazioni non esplicitamente espresse.
La costruzione di un :blue:`dizionario`  in linguaggio naturale è utile ma non risolutiva, 
in quanto esprime informazione ancora affetta da ambiguità se non da incoeranza e inconsistenza.

Dunque, le informazioni date in linguaggio naturale servono solo in una fase preliminare
dei lavori. 
Occorre esprimere le informazioni in modo 'formale', cioè in modo 
**comprensible alla macchina**.


A tal fine sono utili i linguaggi che permettono di definire :ref:`modelli`
capaci di catturare gli aspetti essenziali, lasciando sullo sfondo dettagli 
anche importanti, ma non rilevanti nelle prime fasi.

Gli `Use Cases Diagrams`_ utilizzati in `UML`_ e le più recenti `User Stories`_ possono essere utili 
come linea-guida per definire una o più :blue:`TestUnits` funzionali.
Le specifiche degli *Use Cases* espresse in linguaggio naturali possono essere inserite
come commenti in tali *TestUnits*.

:remark:`Le domande` da porre al committente mirano a **chiarire**:

-  la natura delle entità, cioè se dal punto di vista software, 
   una entità è (modellabile come un) oggetto (POJO), un servizio, un processo, un attore, etc.

- se le varie entità devono essere distribuite su diversi nodi computazionali

- i vincoli tecnologici, cioè se il committente propone già qualche specifica tecnologia 
  o qualche specifico supporto per una data entità

- le interazioni (a procedure-call, a messaggi, sincrone, asincrone) tra le diverse entità 



---------------------------------
L'analisi del problema
---------------------------------

:slide:`L'analisi del problema`

L'analisi del problema mira a:

:slide1:`chiarire le problematiche implicate dai requisiti`

:slide1:`fornire informazioni su costi/tempi/risorse`

L'analisi del problema :blue:`NON IMPLICA ancora alcuna progettazione`,
ma mira a fornire un **quadro delle possibili soluzioni tecnologighe**
individuando quelle più utili per il superamento delle problematiche poste dai requisiti.
La scelta finale sarà fatta dal progettista (che potrebbe anche ampliare lo spettro
della indagine - ricordiamo che siamo in un processo di
:ref:`Progettazione e sviluppo evolutivo`).

L'analisi del problema serve per capire quali sono le maggiori problematiche 
da affrontare, le tecnologie da usare e le risorse (umane e temporali) necessarie.  
Inoltre gettano le basi per impostare il primo SPRINT di sviluppo e quindi per 
costruire un primo 'prototipo' funzionante del sistema da estendere poi in modo 
incrementale con gli SPRINT succesivi dopo una opportuna SPRINT-review con 
il committente

Al termine della analisi dei requisiti e del problema dovrebbe essere definito 
un modello del sistema che mette in luce i macro-componenti 
e le loro interazioni, cioè una prima :blue:`architettura logica` del sistema.

:slide1:`Il ruolo della architettura logica`

---------------------------------
L'architettura logica
---------------------------------


Il risultato della analisi può essere sintetizzato nella definizione di una 
:blue:`architettura logica` che definisce la NATURA (oggetti, processi, servizi, attori, database, etc.) 
dei MACRO-COMPONENTI del sistema e della loro interazione, 
NON COME SOLUZIONE DI PROGETTO, ma come VINCOLI IMPLICATI dal problema.

:remark:`Il risultato della analisi del problema dovrebbe essere (del tutto) condiviso`
 
Da questa architettura dovrebbe anche scaturire la valutazione dell':ref:`Abstraction gap` rispetto alle 
tecnologie disponibili (librerie, frameworks, piattaforme, etc.)

L'analista potrebbe/dovrebbe dare uno sguardo complessivo al problema,
cercando anche di organizzare tutte le funzionalità per importanza, e come queste
funzionalità debbano essere  distribuite tra i vari MACRO-componenti.


------------------------------------------------
Progettazione e sviluppo evolutivo
------------------------------------------------

:slide:`Progettazione e sviluppo` 

L'uso dei modelli è utile (per non dire indispensabile) PER CONCENTRARE
l'attenzione SUGLI ASPETTI RITENUTI SALIENTI (tenendo conto anche
dei tempi, delle tecnologie disponibili  e dei costi).

Come già previsto da `UML`_, è opportuno definire modelli come risultato delle 
fasi di analisi dei requisiti (*Use Case Diagrams*), analisi del problema 
e del progetto (*class diagrams, sequence diagrams*, *activity diagrams*, *statechart diagram* ) 
e anche per la distribuzione del prodotto (*deployment diagrams*).

:ref:`L'architettura logica` espressa mediante un modello esguibile del sistema da realizzare,
condiviso tra tutti (customer, responsabili aziendali, sviluppatori), è un importante e solido punto di partenza
per la progettazione della soluzione, cioè per il passaggio da :blue:`WHAT` a :blue:`HOW`.

:slide1:`Un processo evolutivo`

il passaggio da :blue:`WHAT` a :blue:`HOW` può essere visto e svolto come un :blue:`processo evolutivo` 
di trasformazione/specializzazione dell'architettura logica di base. 

Il modello della architettura logica può essere anche il riferimento per la impostazione di
PIANI di testing espressi in MODO NON discorsivo (formale), comprensibile a una macchina. 

Noi seguiremo questa idea con lo sviluppo (si veda :ref:`FASE2`) di
un meta-modello custom che permette la definizione di modelli eseguibili di sistemi distributi.


  
 

:slide:`Il testing`

Si veda :ref:`Testing` nella sezione  :ref:`Principi`.

---------------------------------
Passi operativi 'a regime' 
---------------------------------

Anticipiamo qui le azioni principali che svolgeremo nella :ref:`FASE3`, dopo avere sperimentato 
nella :ref:`FASE1` il modo di procedere oggi più diffuso 
ed esserci costruiti un nostro ambiente di sviluppo custom nella :ref:`FASE2`:

#. Costruire un repository GIT del progetto.
#. Definire un primo modello del sistema come risultato della analisi del problema 
   (e non del progetto della soluzione).
#. Includere nel documento di analisi gli appropriati riferimenti al modello.
#. Utilizzare il modello per definire  **Piani di Testing** significativi in relazione alle `User Stories`_ 
#. Realizzare il progetto 
#. Impostare la codifica
#. Impostare il deployment e la manutenzione (in prospettiva `DevOps`_)
