.. role:: red 
.. role:: blue 
.. role:: brown 
.. role:: remark
.. role:: worktodo

.. _tuPrologNew: https://apice.unibo.it/xwiki/bin/view/Tuprolog/
.. _tuProlog: http://amsacta.unibo.it/5450/7/tuprolog-guide.pdf
.. _Prolog: https://it.wikipedia.org/wiki/Prolog
.. _Json: https://it.wikipedia.org/wiki/JavaScript_Object_Notation

=============================
Applicazione1-HTTP-Core
=============================

Il nostro :ref:`Appl1: Piano di lavoro` prevede che il primo prodotto da realizzare sia
il componente ``Appl1`` dell':ref:`Appl1: Architettura logica`, il quale ha la responsabilità
del *core-business*, come concordato dopo l':ref:`Appl1: Analisi dei requisiti`.

Al termine dello sviluppo dovremo realizzare ed eseguire le :ref:`Appl1: Azioni di testing pianificate`.

--------------------------------------
Un approccio da evitare
--------------------------------------

In prima battuta, il progetto sembra consistere essenzialmente nell'utilizzare una qualche libreria Java per 
inviare comandi via HTTP o via WS al :ref:`VirtualRobot23`. 

Proviamo a seguire subito questo impulso immediato alla codifica, con l'intento di esaminarne criticamente 
il risultato, riservandoci poi, se fosse il caso, di migliorarne la struttura, con opportuna
opera di *code-refactoring*.

Il titolo della sezione indica però che questo approccio sarebbe da evitare, a favore di una più 
approfondita (e 'formalizzata') fase di analisi e progettazione.

 

++++++++++++++++++++++++++++++++++++++
unibo.http.FatApplication1NoStop
++++++++++++++++++++++++++++++++++++++

Partendo dal più semplice modo di :ref:`Interazione sincrona` basato su HTTP, risolviamo il problema inviando al robot
un comando di movimento in avanti per un tempo abbastanza lungo a garantire una collisione con la parete di fronte.
Dopo la collisione inviamo un comando di rotazione a sinistra e ripetiamo il tutto 4 volte.

:remark:`Al momento igoriamo il problema della gestione dei comandi di stop/resume.`

Per evitare la scrittura di lunghe stringhe di codice, 
introduciano una classe di comodo che definisce alcuni comandi-base
per il robot:

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
unibo.common.VrobotMsgs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

.. code:: Java

  public class VrobotMsgs {
      public final static String turnrightcmd = 
        "{\"robotmove\":\"turnRight\"    , \"time\": \"300\"}";
      public final static String turnleftcmd  = 
        "{\"robotmove\":\"turnLeft\"     , \"time\": \"400\"}";   
      public final static String haltcmd      = 
        "{\"robotmove\":\"alarm\" ,        \"time\": \"10\"}";
      public final static String stepcmd      = 
        "{\"robotmove\":\"moveForward\"  , \"time\": \"350\"}";

      public final static String forwardcmd   = 
        "{\"robotmove\":\"moveForward\"  , \"time\": TIME}"; 
      public final static String backwardcmd  = 
        "{\"robotmove\":\"moveBackward\" , \"time\": TIME}";

      public final static String forwardlongcmd   = 
        "{\"robotmove\":\"moveForward\"  , \"time\": \"2300\"}"; 
  }

Lo schema risolutivo può essere espresso  **decomponendo** le azioni in procedure con precise, singole responsabilità
(stiamo applicando alle procedure il :blue:`single responsibility principle` dei principi  `SOLID <https://en.wikipedia.org/wiki/SOLID>`_)
per gli oggetti).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
walkAtBoundary
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

.. code:: Java

     private  final String URL = "http://"+localHostName+":"+port+"/api/move";

    //Procedura responsabile della business logic
    public void walkAtBoundary() {
        for( int i=1; i<=4;i++) {
            walkAheadUntilCollision(i);
            requestSynch(URL, VrobotMsgs.turnleftcmd); //discard result
        }
    }

    //Procedura responsabile del movimento in avanti, con collisione
    public void walkAheadUntilCollision(int n) {
        String cmd = VrobotMsgs.forwardlongcmd;
        JSONObject result = requestSynch(  URL, cmd  );
        if( ! result.toString().contains("collision")  ) {
            CommUtils.outred("fatal error: no collision"); 
        }
    }

La procedura :ref:`requestSynch` ha la responsabilità di interagire con il robot con :ref:`Interazione sincrona` via HTTP, 
restituendo l'esito del movimento.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
requestSynch
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

La procedura  *requestSynch* nasce dall'intento di liberare il codice della business logic dai dettagli della interazione 
via HTTP.  Per rendere la procedura più generale, viene fornito in ingresso l'URL del destinatario.

.. code:: Java

    httpclient = org.apache.http.impl.client.HttpClients.createDefault();
    JSONParser simpleparser        = new JSONParser();

    protected JSONObject requestSynch( String URL, String crilCmd )  {
        JSONObject jsonEndmove = null;
        try {
            StringEntity entity = new StringEntity(crilCmd);
            HttpUriRequest httppost = RequestBuilder.post()
                    .setUri(new URI(URL))
                    .setHeader("Content-Type", "application/json")
                    .setHeader("Accept", "application/json")
                    .setEntity(entity)
                    .build();
            CloseableHttpResponse response = httpclient.execute(httppost);
            String jsonStr = EntityUtils.toString( response.getEntity() );
            jsonEndmove = (JSONObject) simpleparser.parse(jsonStr);
        } catch(Exception e){ ...  }
        return jsonEndmove;
    }

++++++++++++++++++++++++++++++++++++++++
Una prima osservazione critica
++++++++++++++++++++++++++++++++++++++++

La procedura :ref:`requestSynch` non ha nulla a che fare con la logica del problema da risolvere; essa 
rappresenta una funzionalità tipica di un'infrastruttura di supporto alle comunicazioni, che dovrebbe
essere progettata, sviluppata, testata e resa disponibile (*deployed*), liberando l'applicazion-designer
da compiti di questo tipo.

Procediamo dunque a un primo **refactoring** del codice, cercando di incapsulare questa procedura entro un 
oggetto che possa essere riusato anche in altre applicazioni.

-------------------------------------------------
Progetto unibo.basicomm23: anticipazione
-------------------------------------------------
 
Una volta intrapresa la direzione di creare supporti riusabili per le comunicazioni,
conviene accumulare questi sforzi progettuali e realizzativi in un progetto ad hoc.

A questo scopo dedicheremo il progetto :ref:`unibo.basicomm23` in cui inseriremo supporti di tipo
generale per i protocolli definiti dal :ref:`ProtocolType<unibo.basicomm23.msg.ProtocolType>` che segue: 
 
+++++++++++++++++++++++++++++++++++++++++
unibo.basicomm23.msg.ProtocolType
+++++++++++++++++++++++++++++++++++++++++
 
.. code:: java

    public enum ProtocolType {
        http, ws, tcp, udp, coap, mqtt, bluetooth, serial
    }

Il progetto è organizzato in un insieme di packages come quello mostrato nell figura che segue:

.. image::  ./_static/img/Intro/basicComm23.png
   :align: center 
   :width: 25% 

Nel package ``utils`` viene definita la classe :blue:`CommUtils` in cui inseriremo vari metodi *static* di uso 
comune, tra cui:

- ``delay``: per sospendere l'esecuzione del Thred corrente
- ``outxxx``, con ``xxx=blue,red,grenn,yellow, ...`` per visualizzare messaggi colorati su ``System.out``,
  una feature che risultà utile per differenzare le informazioni emesse dai diversi componenti delle nostre applicazioni




++++++++++++++++++++++++++++++++++++++++++
unibo.basicomm23.http.HTTPCommApache
++++++++++++++++++++++++++++++++++++++++++

La classe ``HTTPCommApache`` rappresenta un primo passo verso la creazione di una infrastruttura di 
supporto alle comunicazioni.

.. code:: Java

  public class HTTPCommApache {

      private final CloseableHttpClient httpclient = HttpClients.createDefault();
      private final JSONParser simpleparser        = new JSONParser();
      private String URL;

      public HTTPCommApache(String url) {
          URL = "http://" +url;
      }

      public JSONObject requestSynch( String msg )  {
          JSONObject jsonEndmove = null;
          try {
              ....
          } catch(Exception e){...}
          return jsonEndmove;
      }

  }

Nel nome della classe compare il termine *Apache* per enfatizzare il fatto che essa fa uso della libreria
*org.apache.http*, mentre in futuri progetti (come ``unibo.comm23``) faremo uso di altre librerie, 
come *com.squareup.okhttp3*.

-------------------------------------------------
Comunicazioni di alto livello col robot
-------------------------------------------------

La classe :ref:`unibo.basicomm23.http.HTTPCommApache` si occupa di interazioni low-level HTTP di tipo generale.

Tuttavia, da punto di vosta logico, la nostra attenzione è rivolta alla comunicazione con il robot, che 
conviene sia caratterizzata da concetti di più alto livello. 


A questo fine, introduciamo anche una classe 
:ref:`unibo.supports.VrobotHLMovesHTTPApache` di supporto alle comunicazioni  con il  :ref:`VirtualRobot23`, 
definite nell'interfaccia :ref:`unibo.common.IVrobotMoves`.

Questo ulteriore livello **non** sarà ovviamente incluso nel progetto  :ref:`unibo.basicomm23` in quanto specifio 
per la nostra applicazione corrente. 

+++++++++++++++++++++++++++++++++++
unibo.common.IVrobotMoves
+++++++++++++++++++++++++++++++++++

.. code:: Java

  public interface IVrobotMoves {
      public boolean step(int time) throws Exception;
      public void turnLeft() throws Exception;
      public void turnRight() throws Exception;
      public void forward( int time ) throws Exception;
      public void backward( int time ) throws Exception;
      public void halt() throws Exception;
  }

+++++++++++++++++++++++++++++++++++
step
+++++++++++++++++++++++++++++++++++

Notiamo che, rispetto ai :ref:`Comandi-base per il robot in cril`, compare una nuova operazione, :blue:`step`, 
che muove in avanti il robot per un tempo dato (come ``forward``) restituendo il valore boolean ``true`` 
se il movimento termina con successo e ``false`` nel caso 
il movimento non possa essere completato, per via di una collisione. 



+++++++++++++++++++++++++++++++++++++++
unibo.supports.VrobotHLMovesHTTPApache
+++++++++++++++++++++++++++++++++++++++

La classe di supporto alle comunicazioni di alto livello con il robot si avvale, al momento, di una istanza di 
:ref:`unibo.basicomm23.http.HTTPCommApache` per inviare comandi via `HTTP`.

.. code:: Java

  public class  VrobotHLMovesHTTPApache implements IVrobotMoves{
    private HTTPCommApache httpSupport  ;

    public VrobotHLMovesHTTPApache(HTTPCommApache httpSupport) {
        this.httpSupport = httpSupport;
    }   
    //Implementazione delle operazioni di  IVrobotMoves
    ...  
  }

La realizzazione delle operazioni-base è semplice, grazie anche a :ref:`unibo.common.VrobotMsgs`. Ad esempio:

.. code:: Java
    
    @Override
    public void turnLeft() throws Exception{
        httpSupport.requestSynch(  VrobotMsgs.turnleftcmd  );
    }

    @Override
    public void forward(int time) throws Exception{
        JSONObject result = httpSupport.requestSynch(  
                    VrobotMsgs.forwardcmd.replace("TIME",""+time)  );
        if( result.toString().contains("collision")  ){
            throw new CollisionException(  ) ;
        }
    }

Si noti che è stata definita anche una nuova eccezione, che può essere sollevata dalle operazioni *forward* e *backward*:

+++++++++++++++++++++++++++++++++++
unibo.common.CollisionException
+++++++++++++++++++++++++++++++++++

.. code:: Java

  public class CollisionException extends Exception{
      public String getMessage(){ return "collision"; }
  }


+++++++++++++++++++++++++++++++++++
step: implementazione
+++++++++++++++++++++++++++++++++++

Anche la implementazione della operazione :ref:`step` non risulta complicata, in quanto stiamo agendo con 
:ref:`Interazione sincrona`. Nel caso di collisione però dobbiamo evitare la possibilità di invocare una 
nuova mossa  prima del completamento (con fallimento) della operazione ``forwardcmd``.

.. code:: Java

    @Override
    public boolean step(int time) throws Exception{
        String cmd = VrobotMsgs.forwardcmd.replace("TIME", ""+time);
        JSONObject result = httpSupport.requestSynch(   cmd  );
        boolean interrupted = result.toString().contains("collision");
        if( interrupted ){
            CommUtils.delay(time + time/2); //to avoid notallowed
        }
        return ! interrupted;
    }

Ora, avvalendoci di questi suppporti, possiamo impostare una soluzione al nostro core-problem che elimina dal codice molti 
dei dettagli precedenti, evidenziando solo la logica della soluzione stessa:

+++++++++++++++++++++++++++++++++++++++++
unibo.http.Application1NoStop
+++++++++++++++++++++++++++++++++++++++++

.. code:: Java

  public class Application1NoStop {
    private IVrobotMoves vr  ;

    public Application1NoStop(){
        String URL = "localhost:8090/api/move";
        HTTPCommApache httpSupport = new HTTPCommApache(URL);
        vr = new VrobotSupportNaive( httpSupport );
    }

    public void walkAtBoundary() throws Exception {
        for( int i=1; i<=4;i++) {
            walkAheadUntilCollision(i);
            //walkByStepping();
            vr.turnLeft();
        }
    }

    public void walkAheadUntilCollision(int n)  throws Exception{
        try{
            vr.forward(2300 );
        }catch( CollisionException e){  return;  }
        throw new Exception("no collision");
    }
  }


Osserviamo che ``walkAtBoundary`` potrebbe adottare anche una strategia di movimento basata su :ref:`step`:

+++++++++++++++++++++++++++++++++
walkByStepping
+++++++++++++++++++++++++++++++++

.. code:: Java

    public void walkByStepping(int n) throws Exception {
        boolean goon = true;
        while( goon ) {
            goon =  vr.step(350);
            CommUtils.delay(300); //to show the steps better
        }
    }

E' ora venuto il momento di
:remark:`Affrontare il problema della gestione dei comandi di stop/resume.`

Osserviamo che, realizzare il movimento del robot usando :ref:`step` permette di impostare agevolmente 
una soluzione al problema ``stop/resume``,
inserendo un test di controllo tra uno *step* e l'altro. Lo :ref:`step` diventa la mossa elementare di movimento non
interrompibile.
 

--------------------------------------------------
unibo.appl1.http.Application1HTTPCore
--------------------------------------------------

La classe ``Application1HTTpCore`` ha il compito di gestire anche i comandi ``stop/resume``, modificando il metodo
``walkByStepping`` in modo da rederlo 'reattivo' a un comando di ``stop``.



+++++++++++++++++++++++++++++++++
walkBySteppingWithStop
+++++++++++++++++++++++++++++++++
.. code:: Java

    protected boolean stopped = false;

    public void walkBySteppingWithStop(int n) throws Exception {
        boolean stepOk = true;
        while( stepOk  ) {
            stepOk =  vr.step(350);
            CommUtils.delay(300); //to show the steps better
            if( stopped ) {
                waitResume();
            }
        }
        return;
    }

    public synchronized void waitResume(){
        while( stopped ){
            try {
                wait();
            } catch (InterruptedException e) {... }
        }
    }

La variabile ``stopped`` viene posta ``true`` alla ricezione di una comando di ``stop`` e dovrà essere resettata a ``false``
alla ricezione di una comando di ``resume``.


+++++++++++++++++++++++++++++++++++
unibo.console.CmdConsoleSimulator
+++++++++++++++++++++++++++++++++++

Per testare la correttezza della logica applicativa in un :blue:`ambiente locale`, senza le complicazioni della distribuzione,
introduciamo un simulatore della *CmdConsole*, che interagisce direttamente con l'applicazione vista come un
`POJO <https://it.wikipedia.org/wiki/Plain_Old_Java_Object>`_, invocandone  
:ref:`metodi stop/resume<metodi start/stop/resume>`.

.. image::  ./_static/img/Appl1/Application1HTTPCoreWithConsoleSimul.png
   :align: center 
   :width: 70% 

 

.. code:: Java

    public class CmdConsoleSimulator {
    private  Application1Http appl;

        public void activate( Application1HTTPCore appl ) {
            this.appl = appl;
            Thread cmdConsoleSimul = new Thread("cmdConsole") {
                public void run() {
                    for (int i = 1; i <= 5; i++) {
                        CommUtils.delay(3000);
                        CommUtils.outmagenta("cmdConsoleSimul send STOP " + i);
                        appl.stop();
                        //CommUtils.delay(1000);                       
                        //appl.stop(); //send another STOP 
                        CommUtils.delay(1500);
                        appl.resume();
                    }
                }
            };
            cmdConsoleSimul.start();
        }
    }

In alternativa si veda la GUI: ``Application1HttpCoreConsole``.

Nella classe :ref:`unibo.appl1.http.Application1HTTPCore` definiamo i metodi ``start/stop/resume`` come segue:

++++++++++++++++++++++++++++++++ 
metodi start/stop/resume
++++++++++++++++++++++++++++++++ 

Trattando l'applicazione com un POJO, possiamo introdurre metodi per modificare le variabili di stato. 

.. code:: Java
    
    protected boolean started    = false;
    protected boolean stopped    = false;

    public void start(   ) throws Exception {
       if( ! started ){
        started = true;
        walkAtBoundary();
       }else CommUtils.outred("Application already started");
    }
    public  void stop(  ){
        stopped = true;
    }
    public synchronized void resume(  ){
        stopped = false;
        notifyAll();
    }



+++++++++++++++++++++++++++++++++++++++++++++++++
codice di unibo.appl1.http.Application1HTTPCore 
+++++++++++++++++++++++++++++++++++++++++++++++++

Possiamo delienare ora la classe completa che realizza la logica di business. 

Il main si occupa anche di attivare in locale
:ref:`unibo.console.CmdConsoleSimulator`  :


.. code:: Java
 
    public class Application1HTTPCore {
    protected boolean started    = false;
    protected boolean stopped    = false;
    protected IVrobotMoves vr ;

        public Application1HTTPCore(){
            String URL = "localhost:8090/api/move";
            HTTPCommApache httpSupport = new HTTPCommApache(URL);
            vr = new VrobotHLMovesHTTPApache(httpSupport );
        }
        public void walkAtBoundary() throws Exception { ... }
        public void walkBySteppingWithStop(int n) throws Exception { ... }
        public synchronized void waitResume(){ ... }
        public void start(){ ... }
        public void stop(){ ... }
        public synchronized void resume(  ){ ... }

    public static void main( String[] args ) throws Exception {
        CommUtils.aboutThreads("Before start - ");
        Application1HTTPCore appl = new Application1HTTPCore();
        new CmdConsoleSimulator().activate( appl );
        appl.start();
        CommUtils.aboutThreads("At end - ");
    } 



------------------------------------
Appl1 HTTP: testing
------------------------------------

Per realizzare quanto introdotto nei :ref:`Appl1: Piani di testing funzionale`, è necessario che 
un programma di testing sia in grado di accedere a informazioni che derivano dal risultato 
delle attività della applicazione.

+++++++++++++++++++++++++++++++++++++++++++++++
Application1HTTPCore observable
+++++++++++++++++++++++++++++++++++++++++++++++
Un modo per raggiungere lo scopo senza perturbare troppo il codice applicativo realizato fino ad ora, è
farci ispirare dal **pattern observer** e 
:blue:`rendere l'applicazione osservabile`. 
A tal fine, introduciamo le seguenti modifiche:

.. code:: Java

   public class Application1HTTPCore extends java.util.Observable{ ... }

La classe `java.util.Observable <https://www.tutorialspoint.com/java/util/java_util_observable.htm>`_
permette di aggiungere/rimuovere oggetti che implementano la classe 
`java.util.Observer <https://docs.oracle.com/javase/7/docs/api/java/util/Observer.html>`_, la quale 
definisce il metodo  void ``update(Observable o, Object news)`` che viene invocato dal metodo 
``notifyObservers(String news)`` definito in ``Observable``.

++++++++++++++++++++++++++++++++++
updateObservers
++++++++++++++++++++++++++++++++++

Poichè ``notifyObservers`` invoca udpdate degli Observer solo se è stato eseguito il metodo ``setChanged``,
introduciamo il metodo *updateObservers* per non dimenticarci di questo particolare:

.. code:: Java

    private void updateObservers(String msg){
        setChanged();
        notifyObservers(msg);
    }



In questo modo possiamo rendere visibili informazioni all'esterno dell'applicazione. Ad esempio,
per segnalare che il robot è nello stato iniziale e nello stato finale, possiamo introdurre 
opportune notifiche nel metodo ``walkAtBoundary``:

.. code:: Java

    private void walkAtBoundary() throws Exception {
        uodateObservers("robot-athomebegin"); 
        for( int i=1; i<=4;i++) {
            walkBySteppingWithStop(i);
            vr.turnLeft();
        }
        uodateObservers("robot-athomeend");  
    }


Altre notifiche permettono di sapere se il robot è fermo (*robot-stable*) o 
in movimento(*robot-moving*):


.. code:: Java

    public void walkBySteppingWithStop(int n) throws Exception {
        boolean stepOk = true;
        while( stepOk  ) {
            uodateObservers("robot-moving");
            stepOk =  vr.step(350);
            if( ! stepOk ) notifyObservers("robot-collision");
            else uodateObservers("robot-stable");
            CommUtils.delay(300); //to show the steps better
            if( stopped ) {
                uodateObservers("robot-stopped"); 
                waitResume();
            }
        }
        return;
    }


Notiamo che l'osservabilità implica concettualemente :blue:`la introduzione di un nuovo linguaggio`,
definito dall'insieme delle stringhe informative che l'applicazione può emettere. Noi
useremo le seguenti, con ovvia semantica:

- robot-athomebegin 
- robot-moving 
- robot-stable 
- robot-collision 
- robot-stopped  
- robot-resume  
- robot-athomeend

++++++++++++++++++++++++++++++++++++++++++++++
unibo.appl1.common.Appl1Observer
++++++++++++++++++++++++++++++++++++++++++++++

La classe astratta :ref:`ApplAbstractObserver` del progetto  :ref:`unibo.basicomm23` ci fornisce
lo sceheletro di un observer che lascia non specificato il metodo ``public void update(String msg)``.

Specializziamo dunque questa classe per definire un ossservatore di 
:ref:`Application1HTTPCore<Application1HTTPCore observable>`
che tenga traccia della sequenza di stringhe informative emesse dall'applicazione, fornendo anche un metodo che
blocca un chiamante fino a che l'applicazione è giunta al termine.

.. code:: Java

    public class Appl1HttpObserver extends unibo.basicomm23.utils.ApplAbstractObserver {
    private Vector<String> history = new Vector<String>();
    private boolean applTerminatedOk = false;

        @Override
        public void update(String msg) {
            history.add( msg );
            if( msg.equals("robot-athomeend")) setTerminated();
        }

        //permette di riusare un observer in fase di testing
         public void init(){
            history          = new Vector<String>();
            applIsTerminated = false;
        }
        public Vector<String> getHistory(){
            return history;
        }
        private synchronized void setTerminated(){
            applIsTerminated =true;
            notifyAll();
        }
        public synchronized void waitApplTerminated(){
            while( ! applIsTerminated ) {
                try {
                    wait();
                } catch (InterruptedException e) { ...  }
            }
        }
    }

A questo punto possiamo definire un programma, basato su **JUnit**, che effettua i test introdotti in 
:ref:`Appl1: Piani di testing funzionale`.

Iniziamo definendo  una classe-base che definisce alcuni metodi di utilità.

++++++++++++++++++++++++++++++++++++++++++++++
unibo.appl1.http.TestCommonAppl1HTTPLocal
++++++++++++++++++++++++++++++++++++++++++++++

Nella fase iniziale che precede ogni metodo di testing, attiviamo l'applicazione, facendo :blue:`l'assunzione` che sia rispettata
la condizione sullo :ref:`Stato iniziale del virtualrobot`, cioè che il robot sia in ``HOME``.

Dopo avere creato l'applicazione, si aggiunge ad essa :ref:`unibo.appl1.common.Appl1Observer`.


.. code:: Java

    @FixMethodOrder(MethodSorters.NAME_ASCENDING) //esegue i test in ordine crecente di nome
    public class TestCommonAppl1HTTPLocal {
    private Application1HTTPCore appl;
    private Appl1HttpObserver obs;

    protected void initSystem(){
        //Il robot deve essere in HOME !
        appl = new Application1HTTPCore();
        obs.init();
        appl.addObserver( obs );
        CommUtils.outmagenta("initSystem done "  );
    }

- Il metodo ``initSystem`` inizializza il sistema da testare
  
Altri metodi saranno utili per rendere più snello i codice delle procedure di testing.

.. code:: Java

    private void startTheApplication(){
        new Thread(){
        public void run(){
            try{
                appl.start();
            }catch (Exception e) { fail("startTheApplication " + e.getMessage());}
        }
        }.start();
    }

- Il metodo ``appl.start``, che attiva :ref:`walkAtBoundary`, viene invocato in un Thread, per evitare di bloccare il
  Thread di testing, entrando l'applicazione in una fase proattiva.

.. code:: Java

    private boolean checkTerminated(){
        obs.waitApplTerminated();
        return true;
    }

- Il metodo ``checkTerminated`` viene introdotto come utility per aspettare che l'applicazione sia terminata, prima
  di effetuare controlli sulla sequenza di informazioni emesse dell'observer. 

.. code:: Java

    private void checkHistoryAfterStop(){
        CommUtils.delay(1500); //Per elaborare ultime stringhe negli observers (Non bello)
        Vector<String> h = obs.getHistory();
        assert( h.elementAt(0).equals("robot-athomebegin"));
        assert( h.elementAt(1).equals("robot-moving"));
        if( h.size() > 3 ) assert( h.elementAt(2).equals("robot-stable"));
        //Dopo il secondo item ci possono essere altre coppie robot-moving/robot-stable
        assert( h.elementAt(h.size()-1).equals("robot-stopped"));
    }

- Il metodo ``checkHistoryAfterStop`` controlla che la sequenza di stringhe emesse dall'applicazione abbia la forma 
  ``robot-athomebegin (robot-moving robot-stable)+   robot-stopped``.  

++++++++++++++++++++++++++++++++++++++++++++++
testStartNoStop
++++++++++++++++++++++++++++++++++++++++++++++

Questa procedura di testing si realizza ora come segue:

.. code:: Java

    public class TestStartNoStopHTTPLocal extends TestCommonAppl1HTTPLocal{
        @Before
        public void init(){
            initSystem();
        }

        @Test
        public void testStartNoStop(){   
            startTheApplication();
            assert( checkTerminated() );
        }
    }

++++++++++++++++++++++++++++++++++++++++++++++
testStop
++++++++++++++++++++++++++++++++++++++++++++++

La procedura di testing ``testStop`` può essere definita in una nuova classe o anche entro la classe
predente.

.. code:: Java

    @Test
    public void testStop(){
        try {
            startTheApplication();
            CommUtils.delay(2000); //Attendo un pò ...
            appl.stop();
            checkHistoryAfterStop();
            CommUtils.delay(1000 );//Attendo un pò ...
            continueToHome();
        } catch (Exception e) {
            fail("TestAppl1HTTPLocal | testStart " + e.getMessage());
        }
    }
    
    private void continueToHome(){
        appl.resume();
        assert( checkTerminated() );
    }

Notiamo che il metodo ``continueToHome`` riporta il robot nella situazione iniziale, 
permettendo la coesistenza nella stessa classe di altre operazioni di testing, in quanto
viene ripristinata :blue:`l'assunzione` che il robot sia inizialmente in ``HOME``.
 
Di fatto, questo metodo copre anche  :brown:`testResume`, introdotta nelle  :ref:`Appl1: Azioni di testing pianificate`.

-------------------------------------------------
Applicazione1-HTTP-Core: passi successivi
-------------------------------------------------

Adesso abbiamo un sistema testato che soddisfa i requisiti del core-businness.

Dobbiamo ora:

#. Affrontare il progetto e la realizzazione della *CmdConsole*.
#. Affrontare il progetto e la realizzazione di un sistema distribuito.

Questi nuovi progetti richiedono il :remark:`passaggio logico da sistemi ad oggetti` locali che interagiscono
mediante *procedure-call* a sistemi :remark:`a componenti distribuiti attivi che interagiscono a messaggi`
attraverso l'uso di vari protocolli, come quelli introdotti in  :ref:`unibo.basicomm23.msg.ProtocolType`.

Per evitare che l'*application designer* debba occuparsi 
di dettagli implementativi legati alle interazioni, 
possiamo intreprendere una strada che trae ispirazione dal 
:blue:`Principio di inversione delle dipendenze` (un altro dei principi `SOLID <https://en.wikipedia.org/wiki/SOLID>`_), secondo il quale:

:remark:`I componenti di alto livello non devono dipendere da componenti di livello più basso.`

Questa nuova via parte dall'idea che sia il livello applicativo a dire di quali 
elementi astratti (interfacce) o concreti ha bisogno per realizzare comunicazioni di rete e che opportuni 
supporti realizzino quanto dichiarato.

Procederemo in due passi:

- nella sezione :ref:`Interaction2021` defininiremo l'insieme degli elementi (astratti e non) che il livello applicativo 
  assume di avere a disposizione;
- nella sezione :ref:`unibo.basicomm23` svilupperemo un progetto che fornisce i supporti richiesti, basati su diversi 
  :ref:`protocolli<unibo.basicomm23.msg.ProtocolType>`.

.. il progetto :ref:`unibo.basicomm23` è stato sviluppato con lo scopo di 'nascondere' i diversi protocolli, offrendo una astrazione di più alto livello.
.. Vediamo dunque in qualche dettaglio questo progetto :ref:`unibo.basicomm23`.

