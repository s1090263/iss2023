
=====================================
Appunti API Rest  
=====================================

------------------------
API intro
------------------------

Un'API, o application programming interface, è una serie di regole che definisce il modo 
in cui le applicazioni o i dispositivi possono connettersi e comunicare tra loro. 

https://www.ibm.com/it-it/cloud/learn/rest-apis

Le API REST forniscono un modo flessibile e leggero per integrare le applicazioni e sono emerse 
come il metodo più comune per connettere i componenti nelle architetture di microservizi.

+++++++++++++++++
Client
+++++++++++++++++
I client sono utenti che vogliono accedere alle informazioni dal web. 
Il client può essere una persona o un sistema software che utilizza l’API. Ad esempio, gli sviluppatori 
possono scrivere programmi che accedono a dati meteo da un sistema meteo. 
Oppure è possibile accedere agli stessi dati dal proprio browser quando si visita direttamente il sito web del meteo.

+++++++++++++++++
Risorse
+++++++++++++++++
Le risorse sono le informazioni che le varie applicazioni forniscono ai propri client. 
Le risorse possono essere immagini, video, testi, numeri o qualsiasi tipo di dati. 
La macchina che fornisce le risorse al client è chiamata anche server. 
Le organizzazioni utilizzano le API per condividere risorse e fornire servizi Web garantendo sicurezza, 
controllo e autenticazione. Inoltre, le API le aiutano a determinare quale client esegue 
l'accesso a determinate risorse interne.

+++++++++++++++++
API REST
+++++++++++++++++
- Representiational State Transfer (REST) è un’architettura software che impone condizioni sul funzionamento di un'API

- Le API che seguono lo stile architetturale REST sono chiamate API REST. 

- I servizi Web che implementano le architetture REST sono chiamati servizi Web RESTful.

https://aws.amazon.com/it/what-is/restful-api/


+++++++++++++++++
Apolidia
+++++++++++++++++
Nell’architettura REST, l’apolidia si riferisce ad un metodo di comunicazione in cui il server completa 
ogni richiesta del client indipendentemente da tutte le richieste precedenti. 
I client possono richiedere risorse in qualsiasi ordine e ogni richiesta è senza stato o isolata da altre richieste. 
Questi vincoli di progettazione di REST API implicano che il server può ogni volta comprendere 
e soddisfare del tutto la richiesta. 

+++++++++++++++++
Cacheability
+++++++++++++++++
I servizi Web RESTful supportano il caching, ossia il processo di archiviazione di alcune risposte 
nel client o in un intermediario per migliorare il tempo di risposta del server. 
Ad esempio, supponiamo di visitare un sito web con immagini header e footer comuni su ogni pagina. 
Ogni volta che si visita una nuova pagina del sito web, il server deve rinviare le stesse immagini. 
Per evitare ciò, il client salva nella cache o archivia queste immagini dopo la prima risposta e utilizza 
le immagini direttamente dalla cache. I servizi Web RESTful controllano il caching utilizzando 
le risposte API che si definiscono cacheabili o non cacheabili.

+++++++++++++++++++++++++++
Contenuto di una richiesta
+++++++++++++++++++++++++++
Le API RESTful necessitano di richieste che contengano le seguenti componenti fondamentali:

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Identificatore unico di risorse
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Il server identifica ogni risorsa con identificatori unici di risorse. 
Per i servizi REST, il server di solito esegue l’identificazione della risorsa utilizzando 
un Uniform Resource Locator (URL). L’URL specifica il percorso alla risorsa. 
Un URL è simile all’indirizzo del sito web inserito nel browser per consultare qualsiasi pagina web. 
L’URL è anche detto endpoint di richiesta e specifica chiaramente al server ciò che il client richiede.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Metodo
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Gli sviluppatori spesso implementano le API RESTful utilizzando l’Hypertext Transder Protocol (HTTP). 
Un metodo HTTP indica al server quello che è necessario fare alla risorsa. Di seguito, quattro comuni metodi HTTP:

&&&&&&&&&&
GET
&&&&&&&&&&
I client utilizzano GET per accedere alle risorse che sono collocate all’URL specifico nel server. 
Possono salvare nella cache le richieste GET e inviare i parametri nella richiesta di API RESTful 
per istruire il server a filtrare i dati prima di inviarli.

&&&&&&&&&&
POST
&&&&&&&&&&
I client utilizzano POST per inviare dati al server. Includono la rappresentazione dei dati con la richiesta. 
Inviare la stessa richiesta POST più volte ha l’effetto collaterale di creare la stessa risorsa più volte.

&&&&&&&&&&
PUT
&&&&&&&&&&

I client utilizzano PUT per aggiornare le risorse esistenti nel server. 
A differenza di POST, inviare la stessa richiesta PUT più volte in un servizio Web RESTful dà lo stesso risultato.

&&&&&&&&&&
DELETE
&&&&&&&&&&
I client utilizzano la richiesta DELETE per rimuovere la risorsa. 
Una richiesta DELETE può cambiare lo stato del server. Tuttavia, se l'utente non possiede un'autenticazione appropriata, 
la richiesta fallisce.

&&&&&&&&&&&&&&
Header HTTP
&&&&&&&&&&&&&&
Gli header di richiesta sono i metadati scambiati tra il client e il server. 
Ad esempio, l’header di richiesta indica il formato della richiesta e la risposta, fornisce informazioni 
sullo stato della richiesta e così via.

&&&&&&&&&&&&&&
Dati
&&&&&&&&&&&&&&
Le richieste API REST possono includere dati per POST, PUT e altri metodi HTTP per funzionare correttamente.

&&&&&&&&&&&&&&
Parametri
&&&&&&&&&&&&&&
Le richieste API RESTful possono includere parametri che forniscono al server più dettagli su ciò che deve essere fatto. 
Di seguito alcuni tipi di parametri:

- I parametri di percorso che specificano i dettagli dell’URL.
- I parametri query che richiedono più informazioni sulla risorsa.
- I parametri cookie che autenticano rapidamente il client.


++++++++++++++++++++++++++++
Autenticazione
++++++++++++++++++++++++++++

Un servizio Web RESTful deve autenticare le richieste prima che possa inviare una risposta. 
L'autenticazione è il processo di verifica di un'identità.

%%%%%%%%%%%%%%%%%%%%%%%%%%
Autenticazione HTTP
%%%%%%%%%%%%%%%%%%%%%%%%%%
L'HTTP definisce alcuni schemi di autenticazione che si possono utilizzare direttamente quando si stanno implementando API REST. 
Di seguito, due di questi schemi:

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Autenticazione di base
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Nell'autenticazione di base, il client invia l'user name e la password nell'header della richiesta. Essa li codifica con base64, una tecnica di encoding che converte la coppia in un set di 64 caratteri per la trasmissione sicura.

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Autenticazione bearer
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Il termine autenticazione bearer si riferisce al processo con cui si fornisce il controllo d'accesso al token bearer. Il token bearer è solitamente una stringa crittografata di caratteri che il server genera in risposta alla richiesta di login. Il client invia il token nell'header della richiesta per accedere alle risorse.

%%%%%%%%%%%%%%%%%%%%%%%%%%
Chiavi API
%%%%%%%%%%%%%%%%%%%%%%%%%%
Le chiavi API sono un'altra opzione per l'autenticazione delle API REST. In questo approccio il server assegna un valore unico generato ad un nuovo client. Quando il client tenta di accedere alle risorse, esso utilizza la chiave unica API per autoverificarsi. Le chiavi API sono meno sicure perché il client deve trasmettere la chiave, il che la rende vulnerabile al furto in rete.

%%%%%%%%%%%%%%%%%%%%%%%%%%
OAuth
%%%%%%%%%%%%%%%%%%%%%%%%%%
OAuth combina le password e i token per accessi login a qualsiasi sistema estremamente sicuri. Il server richiede prima una password e poi un altro token per completare il processo di autorizzazione. Può controllare il token in qualsiasi momento e nel corso del tempo con uno specifico margine e una specifica durata.


++++++++++++++++++++++++++++++++++++
APIREST generic
++++++++++++++++++++++++++++++++++++
Un'API REST è un'API conforme ai principi di progettazione dello stile architetturale REST 
o representational state transfer. Per questo motivo, le API REST sono a volte indicate come API RESTful.

Al suo livello più basilare, un'API è un meccanismo che consente a un'applicazione o a un servizio 
di accedere ad una risorsa all'interno di un'altra applicazione o un altro servizio. 
L'applicazione o il servizio che effettua l'accesso si chiama client e l'applicazione o 
il servizio che contiene la risorsa si chiama server.

Le API REST comunicano tramite richieste HTTP per eseguire funzioni di database standard come la creazione, 
la lettura, l'aggiornamento e l'eliminazione di record (insieme di operazioni noto anche come CRUD, 
acronimo di "create, read, update and delete") all'interno di una risorsa. Ad esempio, 
un'API REST utilizzerà una richiesta GET per richiamare un record, una richiesta POST per crearne una, 
una richiesta PUT per aggiornare un record e una richiesta DELETE per eliminarne una. 

Nelle chiamate API possono essere utilizzati tutti i metodi HTTP. 
Un'API REST ben progettata è simile ad un sito web in esecuzione in un browser web con funzionalità HTTP integrate.

Lo stato di una risorsa in qualsiasi specifico istante, o data/ora, è noto come rappresentazione della risorsa. 
Queste informazioni possono essere fornite a un client in praticamente qualsiasi formato tra cui JSON 
(JavaScript Object Notation), HTML, XLT, Python, PHP o testo semplice. 

JSON è diffuso perché può essere letto sia dagli esseri umani che dalle macchine ed è è indipendente 
dal linguaggio di programmazione.

Anche le intestazioni e i parametri di richiesta sono importanti nelle chiamate API REST perché includono 
importanti informazioni di identificazione quali metadati, autorizzazioni, 
URI (uniform resource identifier), memorizzazione in cache, cookie e altro ancora. 
Le intestazioni di richiesta e le intestazioni di risposta, insieme ai codici stato HTTP convenzionali, 
sono utilizzate all'interno di API REST ben progettate.

