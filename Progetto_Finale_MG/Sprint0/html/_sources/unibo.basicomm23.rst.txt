.. role:: red 
.. role:: blue 
.. role:: brown 
.. role:: remark
.. role:: worktodo

.. _tuPrologNew: https://apice.unibo.it/xwiki/bin/view/Tuprolog/
.. _tuProlog: http://amsacta.unibo.it/5450/7/tuprolog-guide.pdf
.. _Prolog: https://it.wikipedia.org/wiki/Prolog
.. _Json: https://it.wikipedia.org/wiki/JavaScript_Object_Notation

=============================
unibo.basicomm23
=============================

Il progetto intende definire supporti di tipo generale per un insieme di protocolli.

-------------------------
Tipi di protocollo
-------------------------
.. code:: java

    public enum ProtocolType {
        http, ws, tcp, udp, coap, mqtt, bluetooth, serial
    }

Per ogni protocollo viene definito un package che ne contiene i supporti low-level.

.. image::  ./_static/img/Intro/basicComm23.png
   :align: center 
   :width: 25% 

Nel package ``utils`` viene definita la classe :ref:`CommUtils<unibo.basicomm23.utils.CommUtils>`,
di cui parleremo in seguito. 

++++++++++++++++++++++++++++++++++++++++++
unibo.basicomm23.utils.ConnectionFactory
++++++++++++++++++++++++++++++++++++++++++

Come implicito nel modello delle inversioni di dipendenza, 
le istanziazioni di variabili richiedono l'implementazione di un pattern creazionale come un *factory mthod* 
o il *pattern factory*, o l'uso di un framework di *dependency-injection*.


In questo progetto, introduciamo una classe ``ConnectionFactory`` che definisce il metodo:  

``public static Interaction2021 createClientSupport( ProtocolType protocol, String hostAddr, String entry )``

che restituisce un supporto che permette di utilizzare il protocollo ``protocol`` per inviare informazioni 
al nodo di indirizzo ``hostAddr``; la stringa relativa al parametro :blue:`entry` denota valori che dipendono 
dal protocollo: di solito è un numero di porta, ma potrebbe essere anche un *Uniform Resource Identifier* (URI) 
o altro ancora.

L'oggetto di supporto alle comunicazioni restituito dalla factory implementa l'interfaccia ``Interaction2021``,
nascondendo al livello applicativo i dettagli relativi al protocollo.

.. che descriveremo più avanti, (nella sezione :ref:`unibo.basicomm23.interfaces.Interaction2021`), quando cercheremo di esprimere le comunicazioni  tra componenti ad un più alto livello di astrazione rispetto all'attuale.  


-------------------------------------
unibo.basicomm23.utils.CommUtils
-------------------------------------

Nel package ``utils`` del progetto, viene definita la classe *CommUtils*  che definisce 
vari metodi *static* di utilità.

++++++++++++++++++++++++++++
Metodi di uso comune
++++++++++++++++++++++++++++

- ``void delay(Int)``: per sospendere l'esecuzione del Thred corrente
- ``void outxxx(String)``, con ``xxx=blue,red,grenn,yellow, ...`` per visualizzare messaggi colorati su ``System.out``,
  una feature che risultà utile per differenzare le informazioni emesse dai diversi componenti delle nostre applicazioni


++++++++++++++++++++++++++++++++++++++++++
Metodi per la costruzione di messaggi
++++++++++++++++++++++++++++++++++++++++++

La classe definisce anche metodi statici che agevolano la costruzione e l'invio di 
:ref:`messaggi applicativi<Natura e struttura dei messaggi applicativi>`


- ``JSONObject parseForJson(String message)``
- ``IApplMessage buildDispatch(String sender, String msgId, String payload, String dest)``
- ``IApplMessage buildRequest(String sender, String msgId, String payload, String dest)``
- ``IApplMessage buildReply(String sender, String msgId, String payload, String dest)``
- ``IApplMessage prepareReply(IApplMessage requestMsg, String answer)``

Il metodo ``prepareReply`` confeziona una reply relativa alla ``requestMsg`` data in ingresso, da cui 
determina il nome del chiamante.


++++++++++++++++++++++++++++++++++++++++++
Metodi per l'invio di messaggi
++++++++++++++++++++++++++++++++++++++++++

- ``void forwardOnInterconn( Interaction2021 conn,String msg )``
- ``void replyOnInterconn( Interaction2021 conn,String msg )``
- ``String requestSynchOnInterconn(Interaction2021 conn, String msg )``
  


-----------------------------------------------
Abilitatori di comunicazione
-----------------------------------------------
I componenti di un sistema distribuito devono, di norma, essere capaci di 

#. *ricevere messaggi*. Normalmente questo obiettivo viene raggiunto introducendo un :blue:`server`.
#. *inviare messaggi*. Normalmente questo obiettivo viene raggiunto 
   facendo operare il componente come un :blue:`client` di un qualche server .

Il progetto :ref:`unibo.basicomm23` fornisce supporti per entrambe queste esigenze, attraverso du 'enti abilitatori':

#. :ref:`EnablerAsServer<unibo.basicomm23.enablers.EnablerAsServer>`, che permette di dotare un oggetto applicativo,
   senza modificarlo,  della capacità di ricevere e gestire messaggi usando uno dei protocolli definiti 
   in :ref:`ProtocolType<unibo.basicomm23.msg.ProtocolType>`. La gestione dei messaggi a livello applicativo
   è delegata a un oggetto che implementa l'interfaccia :ref:`IApplMsgHandler<unibo.basicomm23.interfaces IApplMsgHandler>`
#. :ref:`CallerAsClient<unibo.basicomm23.enablers.CallerAsClient>`, che permette a un oggetto applicativo di 
   inviare messaggi usando uno dei protocolli definiti in :ref:`ProtocolType<unibo.basicomm23.msg.ProtocolType>`.


++++++++++++++++++++++++++++++++++++++++++++++++
unibo.basicomm23.interfaces IApplMsgHandler
++++++++++++++++++++++++++++++++++++++++++++++++

Un oggetto che implementa l'interfaccia *IApplMsgHandler* deve essere definito dall'application designer per 
specificare, data una :ref:`Interconnessione`  ``conn``, come gestire un messaggio ricevuto (metodo ``ealborate``) 
e come inviare repliche o risposte al chiamante su ``conn``.

.. code:: java

  public interface IApplMsgHandler  {
    public String getName(); 
    public void elaborate( IApplMessage message, Interaction2021 conn ); 
    public void sendMsgToClient( String message, Interaction2021 conn );
    public void sendAnswerToClient( String message, Interaction2021 conn  );
  }


++++++++++++++++++++++++++++++++++++++++++++++++
unibo.basicomm23.enablers.EnablerAsServer
++++++++++++++++++++++++++++++++++++++++++++++++

Un oggetto di questa classe realizza un server che riceve messaggi, delegandone la gestione a un oggetto che 
implementa :ref:`IApplMsgHandler<unibo.basicomm23.interfaces IApplMsgHandler>`.

.. code:: java

  public class EnablerAsServer   {
    public EnablerAsServer(
        String name, int port, ProtocolType protocol, IApplMsgHandler handler ){
          ...
          setServerSupport( port, protocol, handler  );
    }

    protected void setServerSupport( 
      int port, ProtocolType protocol, IApplMsgHandler handler) throws Exception{
      /*
      Attiva un server per lo specifico protocol
      */
    }

  }

++++++++++++++++++++++++++++++++++++++++++++++++
unibo.basicomm23.enablers.CallerAsClient
++++++++++++++++++++++++++++++++++++++++++++++++

Un oggetto di questa classe realizza un client che stabilisce una :ref:`Interconnessione` con un server remoto
che opera su un nodo con  ``hostAddr`` dato, usando :ref:`ConnectionFactory<unibo.basicomm23.utils.ConnectionFactory>`.

.. code:: java

  public class CallerAsClient {
  private Interaction2021 conn; 
    	public CallerAsClient(String name, String hostAddr, String entry, ProtocolType protocol) {
        ...
        conn = ConnectionFactory.createClientSupport(protocol,host,entry);
      }
      public Interaction2021 getConn() {
        return conn;
      }
  }

---------------------------------
unibo.basicomm23.interfaces
---------------------------------

Il package *interfaces* include la definizione di alcune interfacce, tra cui le già viste
:ref:`Interaction2021<unibo.interaction.interfaces.Interaction2021>` , 
:ref:`IApplMsgHandler<unibo.basicomm23.interfaces IApplMsgHandler>`,
:ref:`IApplMessage<unibo.interaction.interfaces.IApplMessage>` e le seguenti, relative a oggetti osservabili e osservatori:

++++++++++++++++++++++++++++++++++++++++++++++
unibo.basicomm23.interfaces.IObserver
++++++++++++++++++++++++++++++++++++++++++++++

.. code:: java

  public interface IObserver extends java.util.Observer{
    public void update( String value );
    //From Observer: public void update(Observable o, Object news)
  }

Notiamo che ``java.util.Observer`` è :blue:`deprecated` da **Java9** in avanti.  Dovremo approfondire le ragioni di ciò,
ma al momento osserviamo che non viene messa in discussione l'idea di osservabilità, ma solo il modo 
in cui viene realizzata nel mondo della *oop classica*.

++++++++++++++++++++++++++++++++++++++++++++++
unibo.basicomm23.interfaces.IObservable
++++++++++++++++++++++++++++++++++++++++++++++

.. code:: java

  public interface IObservable  {
    public void addObserver(IObserver obs );  
    public void deleteObserver(IObserver obs );  
  }

La classe ``java.util.Observable`` implementa i metodi di *IObservable*, in quanto 
:ref:`IObserver<unibo.basicomm23.interfaces.IObserver>` estende ``java.util.Observer``.

-----------------------------
ApplAbstractObserver
-----------------------------

La classe astratta ``unibo.basicomm23.utils.ApplAbstractObserver`` fornisce lo sceheletro di un observer 
che implementa :ref:`IObserver<unibo.basicomm23.interfaces.IObserver>`, lasciando non specificato 
il metodo ``public void update(String msg)``.

.. code::

    public abstract  class ApplAbstractObserver implements IObserver{

      @Override
      public void update(Observable o, Object arg) {
        update(arg.toString());		
      }
      @Override
      public abstract void update(String value);
    }

-----------------------------
Esempi di uso di basicomm23 
-----------------------------


++++++++++++++++++++++++++++++++++++++
unibo.basicomm23.examples.ProdCons
++++++++++++++++++++++++++++++++++++++

.. code:: java

  public class ProdCons {
  private static int port = 9010;
  private EnablerAsServer server;
  private Interaction2021 client;

    public void doJob( ProtocolType protocol ) throws Exception { 
      EnablerAsServer server = new EnablerAsServer("server", port, protocol,  
                                              new ConsMsgHandler("consumer") );
      server.start();   		

      IApplMessage msg       = 
          CommUtils.buildRequest("producer", "date", "today", "consumer");
      Interaction2021 client = 
         ConnectionFactory.createClientSupport(protocol,"localhost",""+port);
      String answer          = client.request( msg.toString() );
      CommUtils.outblue("ProdCons answer=" + answer);
    }

    public static void main(String args[]) throws Exception{
        CommUtils.outblue("ProdCons starts");
        ProdCons appl = new ProdCons();
        appl.doJob( ProtocolType.tcp  );
    }

+++++++++++++++++++++++++++++++++++++++++++++
unibo.basicomm23.examples.ConsMsgHandler
+++++++++++++++++++++++++++++++++++++++++++++

.. code:: java

    public class ConsMsgHandler extends ApplMsgHandler{

      public ConsMsgHandler(String name) { super(name); }

      @Override
      public void elaborate(IApplMessage message, Interaction2021 conn) {
        try {
          IApplMessage reply = 
               CommUtils.buildReply("consumer", "date", "today", message.msgSender());
          conn.reply(reply.toString());
        } catch (Exception e) { ...  }
      }
    }
