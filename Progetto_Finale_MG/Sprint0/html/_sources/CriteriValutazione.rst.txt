.. role:: red 
.. role:: blue 
.. role:: brown 
.. role:: remark
.. role:: worktodo
.. role:: slide
.. role:: slide1

=================================
Criteri di valutazione
=================================

---------------------------------
Cosa si valuta
---------------------------------

#. La costruzione di un prototipo di sistema software che soddisfa l'insieme di requisiti dato nel :ref:`Temafinale<TemaFinale22>`, 
   mira a verificare il raggiungimento di adeguate abilità teorico/pratiche 
   e può essere effettuata in :remark:`modo individuale` oppure in un :remark:`gruppo di non più di tre studenti`.
#. La discussione individuale orale che segue la demo del prototipo è volta a valutare  
   :blue:`il livello di conoscenza, consapevolezza e di autonomia analitico/progettuale` :remark:`del singolo studente`.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Dettagli sul colloquio orale
++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

- 48 h prima del colloqio, il codice del sistema finale deve essere stato pubblicato sul sito del prototipo
  (individuale o di gruppo), 
  dandone relativa informazione via mail al docente.

- Il giorno del colloquio, ogni gruppo deve avere effettuato gli opportuni preparativi per la/le demo, 
  in modo da essere subito operativo.

L'ordine di presentazione dei gruppi verrà opportunamente stabilito dal docente e si svolgerà come qui di seguito
indicato.

#. Presentazione (collettiva di gruppo) di una :slide1:`demo 'live' del sistema finale` di durata 10-15(max) minuti.
   La demo deve mostrare la esecuzione di almeno un Test(Plan) automatizzato ritenuto significativo.
   Per applicazioni che NON usano robot reali NON sono ammessi video, 
   che potrebbero essere invece utili per mostrare il funzionamento di robot reali 
   o di sistemi che includono il RaspberryPi o altri dispositivi
#. Presentazione (collettiva di gruppo) del progetto del sistema e della sua relazione 
   con la fase di analisi. In questa fase è RICHIESTA la preparazione di 
   :slide1:`3-5 SLIDES  di illustrazione del processo e dell'architettura finale` con figure e (se ritenuto utile) riferimenti al codice. 
   Al termine di queste fasi il gruppo può raggiungere un :remark:`punteggio massimo di 27/30`.
#. Domande (per esempi, si veda qui sotto) rivolte dal docente a singole persone, 
   riguardo al prodotto, al progetto e alla analisi del problema/requisiti. 
   Al termine di questa fase, il singolo studente può raggiungere un :remark:`punteggio massimo di 29/30`.
#. Altre domande rivolte dal docente a singole persone. Al termine di questa fase, il singolo studente
   può raggiungere il :remark:`punteggio di 30 e lode`.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Possibili domande finali
++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

Riportiamo qui un elenco di possibili domande finali durante i colloqui orali:

- Abbiamo appena visto il funzionamento della applicazione. Possiamo vedere il progetto? 
  Quale rappresentazione (linguaggio naturale, diagrammi UML, modelli, figure, parti di codice, ...) 
  propone per l'esposizione del progetto?
- Che forma assume il deliverable di progetto e come è stato prodotto? 
  Vi sono connessioni cone la fase di analisi del problema? E con la fase di analisi dei requisiti?
- Come ci può convincere che l'applicazione 'copre' tutti i requisiti dati senza doverla eseguire 
  caso per caso?
- Può mostrare la struttura della architettura finale del sistema? 
  In quale forma ritiene sia più opportuno presentare l'architettura (o in generale una architettura software)
  per poterne discutere in modo pragmaticamente utile (cioè non solo in modo vago e discorsivo)?
- L'architettura finale è' stata preceduta dalla definizione di una archittura logica scaturita 
  come deliverable della fase di analisi del problema?
- Quali sono i punti salienti che sono stati posti in luce nella fase di analisi del problema? 
  E' stato evidenziato qualche punto particolamente critico?
- E' possibile, secondo lei, definire un modello eseguibile del sistema già al termine della fase di 
  analisi dei requisiti? Se sì, quali vantaggi se ne potrebbero trarre? 
  Se no, perchè non lo ritiene possibile?
- Immagino che come linguaggio di codifica si sia usato principlamente Java e/o Kotlin, 
  insieme a qualche parte scritta in C, C++, Python, JavaScript, etc). 
  Nella fase di analisi del problema, è stato evidenziato qualche macroscopico gap rispetto queste tecnologie? 
  Se sì' come si è pensato di colmare questo 'abstraction gap'?
- Fino a che punto è utile introdurre diagrammmi ``UML`` e per quali scopi? 
  Quali sono le motivazioni che possono indurre una software-house a definire linguaggi 
  (o metamodelli) Domain-specific?
- In ambiente industriale non è possibile pensare che sia possibile utilizzare il metamodello ``QActor``. 
  Ma di certo è diffuso l'uso delle librerie. Secondo lei sarebbe possibile affrontare lo sviluppo 
  di applicazioni distribuite usando solo la libreria ``it.unibo.qakactor-x.y.jar`` e quelle ad essa necessarie?
- Ha trovato un qualche vantaggio nell'uso dei ``QActor`` attraverso un linguaggio custom (di ispirazione ``DSL``) 
  dotato di un suo proprio IDE? Ha una idea di come sia stato prodotto l'IDE per i QActor in ambiente Eclipse?
- Le mostro l'architettura logica proposta dal gruppo xyz. Trova questa architettura logica concordante 
  con la sua o è possibile evidenziare macroscopiche differenze?. 
  Se nota differenze, le possiamo tollerare o no?
- In quale fase (analisi, progetto,...) è stata decisa la natura software dei componenti del sistema; 
  quali sono le motivazioni per queste scelte, e dove sono riportate/discusse?
- In quale fase (analisi, progetto,...) è stata decisa la interazione tra i componenti del sistema; 
  quali sono le motivazioni per queste scelte, e dove sono riportate/discusse?
- In quale fase dello sviluppo è stata definita una pianificazione dei lavori e una loro ripartizione 
  tra i componenti del team?
- In quanti Sprint Scrum-like si è svolto lo sviluppo del software?
- Durante la fase di sviluppo, è stato necessario rivedere qualche parte della analisi del problema? 
  In altre parole, sono state trovate situazioni che l'analista non aveva previsto o aveva affrontato 
  in modo incompleto? Se sì, ha qualche esempio? E come si è procduto in questo caso?
- E' possibilie sapere, per ciascun componente del team, di quali aspetti del sistema si è 
  specificatamente occupato? Quando sono state definite e da chi queste ripartizioni dello sviluppo?
- In quale fase dello sviluppo sono stati impostati programmi per il testing? 
  Quali tipi di test (unit, integration, ...) sono stati pensati e quali effettivamente realizzati?
- L'architettura finale del sistema mostra qualche pattern architetturale riconoscibile 
  (ad es. client-server, layer, clean ...) e in quale fase dello sviluppo (analisi/progetto) 
  è stato deciso di introdurlo? E perchè? Queste motivazioni sono riportate/discusse in qualche documento?
- E' possibile utilizzare l'applicazione avvalendosi di un Browser? Se no, per quale motivo 
  si e' esclusa questa possibilità?
- Come è stato affrontato il requisito xyz? 
- Come viene rappresentato lo stato del sistema? 
  E' uno stato 'concentrato', cioè gestito da un solo componente o distribuito tra più componenti? 
  Chi e quando ha preso una decisione in merito a questo punto?
 
- Il sistema finale utilizza solo un DDR virtuale. Cosa bisognerebbe fare per utilizzare un robot fisico 
  e quanto tempo sarebbe necessario per il refactoring del sistema?
- Il sistema finale e' stato sviluppato tenendo conto dei principi SOLID? E' possibile vederne qualche esempio?
- E' stato utilizzato il linguaggio Prolog? Se sì, per quale motivo?
- Sono state utilizzate annotazioni Java? Se sì, in quali parti o in quali funzionalità e per quale motivo?
- Per un eventuale supporto Web, quale framework è stato utilizzato? Spring o Node/Express? Quali sono le motivazioni della scelta?
- Il sistema finale coinvolge anche un RasperryPi? 
  Se si, quale parte del sistema è stato deployed sul Rasp e in quale modo?
- E' stato tentato un deplyoment della applicazione (o di parti di essa) utilizzando docker? 
  E docker-compose? Se sì quali sono i criteri/motivazioni per la ripartizione di parti applicative su docker?