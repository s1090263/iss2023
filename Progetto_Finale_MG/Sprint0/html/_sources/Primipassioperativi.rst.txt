.. role:: red
.. role:: blue  
.. role:: remark   

.. _rst editor: http://rst.ninjs.org/

.. _Domain Driven Design : https://it.wikipedia.org/wiki/Domain-driven_design
.. _gradle: https://gradle.org/ 
.. _GradleIntro: ../../../../GradleIntro/userdocs/Gradle.intro.html
.. _IntelliJ: https://www.jetbrains.com/idea/
.. _template2023: _static/templateToFill.html
.. _Eclipse IDE for Java and DSL Developers: https://www.eclipse.org/downloads/packages/release/juno/sr2/eclipse-ide-java-and-dsl-developers
.. _Basic Git commands: https://confluence.atlassian.com/bitbucketserver/basic-git-commands-776639767.html
.. _Video on GIT: https://www.youtube.com/watch?v=HVsySz-h9r4
.. _github: https://github.com/
.. _opinionated: https://govdevsecopshub.com/2021/02/26/opinionated-software-what-it-is-and-how-it-enables-devops/

================================
Primi passi operativi
================================

----------------------------------
Installazioni su PC
----------------------------------

#. Installare :blue:`Java JDK 11`  (non useremo versioni più recenti)
#. Installare :blue:`GIT` :brown:`PERSONALE PRIVATO` e dare accesso al docente
#. Compilare `template2023`_ inserendo Fotografia, email e numero di matricola
#. Clonare https://github.com/anatali/issLab23 in una directory vuota e.g. ``C:/.../issLab23``
#. Installare :blue:`Gradle`  (7.6)
#. Installare :blue:`IntelliJ`
#. Installare :blue:`Eclipse IDE` for :brown:`Java and DSL Developers` (2022 06)  
#. Installare :blue:`Docker`
#. Installare :blue:`Node.js`
#. Installare :blue:`Python (3.8.8)`
 
----------------------------------
Creazione progetto con Gradle
----------------------------------
Gradle è uno strumento open source per automatizzare la costruzione (build) del software.

Gradle è ormai uno standard di fatto in questo settore ed è interessante non solo in quanto
strumento, ma anche perchè applica i principi del `Domain Driven Design`_ (**DDD**) 
per modellare il suo proprio  domain-building software.

Per un approfondimento su Gradle si veda  `GradleIntro`_.

Iniziamo creando un progetto con l'aiuto di `Gradle`_

#. Apro sul PC una directory di lavoro (ad esempio **issLab23**) e mi posiziono in essa.
#. Creo la directory **unibolibs**, che conterrà le librerie (file ``.jar``) da noi sviluppate.
   Per il momento, inserisco le seguenti librerie:

   -  ``2p301``
   - ``uniboInterfaces.jar``
   - ``unibo.basicomm23-1.0``

#. Creo una directory per il progetto di nome :blue:`Appl1` e mi posiziono in essa.
#. Eseguo il comando
  
   .. code::

      gradle init (select 2, 3, 1, 1, -, 1, -, -)
   
   La risposta ``2`` alla prima domanda, implica che Gradle costruisca una applicazione-base che possiamo subito 
   eseguire e testare.

#. Eseguo il codice generato:

    .. code::

      gradlew build -x test  //esclude i test
      gradlew run

    L'output dovrebbe essere:

   .. code::

        > Task :app:run
        Hello World!
        BUILD SUCCESSFUL in 2s
        2 actionable tasks: 1 executed, 1 up-to-date

#. Apro il progetto in `IntelliJ`_ , noto le directories ``main`` e ``test`` 
   
#. Osservo il contenuto di  ``app/build.gradle``:

    .. code::

        plugins {
            // Apply the application plugin 
            //to add support for building a CLI application in Java.
            id 'application'
        }
        repositories {
            // Use Maven Central for resolving dependencies.
            mavenCentral()
        }
        dependencies {
            // Use JUnit test framework.
            testImplementation 'junit:junit:4.13.2'
            // This dependency is used by the application.
            implementation 'com.google.guava:guava:30.1.1-jre'
        }
        application {
            // Define the main class for the application.
            mainClass = 'Appl1.App'
        }
    
    L'applicazione del plug-in ``application`` applica implicitamente anche il plug-in ``Java``,
    il quale assume ``src/main/java`` e ``src/test/java`` come directory di origine predefinite.

#. Osservo il contenuto del file ``.gitignore``:

    .. code::
 
       # Ignore Gradle project-specific cache directory
       .gradle
       # Ignore Gradle build output directory
       build

#. Eseguo i test (usando una command shell o il Terminal di ``IntelliJ``):

   .. code::

        gradlew build  	//does also the testing
        gradlew test	//does only the tests

#. Osservo ``app/build/reports/tests/test/index.html``

Lasciamo come pro-memoria questa configurazione e creaimo la nostra applicazione

+++++++++++++++++++++++++++++++++++++++++++
Applicazione
+++++++++++++++++++++++++++++++++++++++++++

#. Creo una nuova directory **application1** entro :blue:`Appl1`
#. Nel file **settings.gradle** modifico la frase *include('app')* in ``include('application1')``
#. Creo in ``application1`` le directories (come in *app*):

   - *src/main/java* e *src/main/resources*
   - *scr/test/java* e *scr/test/resources*
#. Creo la directory   *src/main/java*/**unibo**, che funge da nuovo package
#. Creo in ``application1/src/main/java`` un file di prova

   .. code::
      
    import unibo.basicomm23.utils.CommUtils;
    package unibo;
    public class Application1 {
            public static void main( String[] args ){
                System.out.println("Application1 hello");
                CommUtils.outblue("Application1 hello again");
            }
    }


#. Creo in ``application1`` un file ``build.gradle`` con il seguente contenuto:

   .. code::  

    plugins {
       id 'application'
       id 'eclipse'
       id 'jacoco'
    }

    version '1.0'
    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        flatDir { dirs '../../unibolibs' }  
    }

    dependencies {
        // Use JUnit test framework.
        testImplementation 'junit:junit:4.13.2'

        // This dependency is used by the application.
        implementation 'com.google.guava:guava:30.1.1-jre'

        //CUSTOM unibo
        implementation name: 'unibo.basicomm23-1.0'
    }

     application {
        // Define the main class for the application.
        mainClass = 'unibo.Application1'
    }
 
#. Creo la directory ``Appl1/userDocs`` e vi inserisco in ``userDocs`` copia del file  `template2023`_ con la mia foto, 
   lo ridenomino `application1.html` e vi copio i requisiti dati dal committente.
#. Usando una command shell o il Terminal di ``IntelliJ``:
 
      .. code::

        gradlew run  	 

----------------------------------
Uso di GIT
----------------------------------
Una volta creato il progetto, è opportuno salvarlo su un nostro repository GIT.


Per un aiuto ad usare GIT può essere utile consultare `Basic Git commands`_
e/o guardare il video `Video on GIT`_ di cui  riportiamo l'inizio di alcuni punti salienti:

.. code::

    0:00  - Introduction
    1:31  - Distributed vs Central Version Control
    3:17  - Installing Git
    3:39  - First Time Setup
    6:36  - Getting Started (Local repository)
    10:41 - Git File Control
    14:55 - Getting Started (Remote repository)
    20:37 - Branching
    20:50 - Common Workflow
    23:03 - Push Branch on remote
    27:38 - Faster Example
    29:41 - Conclusion


Per quanto riguarda il nostro progetto:

#. Mi posiziono sulla directory  ``issLab23``.
#. Eseguo:
   
   .. code::

       git init  //creates the directory .git	
       git status

#. Osservo il contenuto del file generato ``.gitignore`` :

   .. code::
 
      # Ignore Gradle project-specific cache directory
      .gradle
      # Ignore Gradle build output directory
      build
        
      git status --ignored	//see ignored files 



   I files elencati non saranno salvati sul repository.
#. Eseguo i comandi     
   .. code::
 
       git add -A
       git commit -m "Appl1"
       git log   //q to exit
       git status

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Creazione di un repository remoto   
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#. Supponendo di avere accesso su `github`_ come user di nome ``userxyz``, creiamo un repository personale di nome 
   ``issLab23``, selezionando il tipo **private**, con *README* file e   **Add .gitignore** (*template Java*). 
   Quindi aggiungiamo il nostro progetto al repository:

    .. code::

        git remote add origin https://github.com/userxyz/issLab23 
        git remote -v   //osservo

#. Rendo visibile al docente del corso il progetto su `github`_ 
#. Posizionato sulla directory ``issLab23``, salvo il progetto corrente sul repository remoto.
   
    .. code::

       git push origin master


---------------------------------
Su RaspberryPi
---------------------------------

#. Acquisire RaspberryPi 3 Model B+, 
#. Sarebbe bene acquisire anche `HC-SR04` Distance Sensor e qualche Led che useremo nella FASE1
#. Al termine della FASE1 faremo anche uso di una (usb) WebCam
#. Per i robot si veda  `robot reali`_

.. #. Per il software si veda :doc:`RaspberrySoftware`  (Installazione-base 2022)

- :ref:`Creazione progetto con Gradle`
- :ref:`Applicazione`
- :ref:`Uso di GIT` 